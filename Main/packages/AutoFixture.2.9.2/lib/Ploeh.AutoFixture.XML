<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ploeh.AutoFixture</name>
    </assembly>
    <members>
        <member name="T:Ploeh.AutoFixture.BehaviorComposer`1">
            <summary>
            A Decorator of <see cref="T:Ploeh.AutoFixture.Dsl.ICustomizationComposer`1"/> that applies behaviors when
            <see cref="M:Ploeh.AutoFixture.BehaviorComposer`1.Compose"/> is invoked.
            </summary>
            <typeparam name="T">The type of specimen to customize.</typeparam>
            <remarks>
            <para>
            In this context, a <i>behavior</i> is an <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilderTransformation"/> that
            is used to decorate the <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> composed by the decorated
            <see cref="P:Ploeh.AutoFixture.BehaviorComposer`1.Composer"/> with decorating builders.
            </para>
            <para>
            This can be used to ensure that the composed builder is decorated with appropriate builders
            such as <see cref="T:Ploeh.AutoFixture.Kernel.ThrowingRecursionGuard"/> or <see cref="T:Ploeh.AutoFixture.Kernel.TraceWriter"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Dsl.ICustomizationComposer`1">
            <summary>
            Provides statements that can be used to control how specimens are created and
            post-processed.
            </summary>
            <typeparam name="T">The type of specimen to customize.</typeparam>
        </member>
        <member name="T:Ploeh.AutoFixture.Dsl.IFactoryComposer`1">
            <summary>
            Provides statements that can be used to control how specimens are created.
            </summary>
            <typeparam name="T">The type of specimen.</typeparam>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer">
            <summary>
            Composes instances of <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/>.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer.Compose">
            <summary>
            Composes a new <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> instance.
            </summary>
            <returns>A new <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> instance.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.IFactoryComposer`1.FromSeed(System.Func{`0,`0})">
            <summary>
            Specifies a function that defines how to create a specimen from a seed.
            </summary>
            <param name="factory">The factory used to create specimens from seeds.</param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.IFactoryComposer`1.FromFactory(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Specifies an <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> that can create specimens of the
            appropriate type. Mostly for advanced scenarios.
            </summary>
            <param name="factory">
            An <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> that can create specimens of the appropriate type.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
            <remarks>
            <para>
            This method is mostly intended for advanced scenarios where a more loosely coupled
            strategy is desired to create specimens, but the advantages of the strongly typed
            <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> are still desired for post-processing.
            </para>
            <para>
            One possible scenario is for post-processing of interfaces or abstract types where
            auto-mocking is desired to create the instance. This method makes it possible to supply
            an auto-mocking <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/>.
            </para>
            <para>
            <paramref name="factory"/> must be able to create specimens of the requested type, or
            exceptions may be thrown.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.IFactoryComposer`1.FromFactory(System.Func{`0})">
            <summary>
            Specifies that an anonymous object should be created in a particular way; often by
            using a constructor.
            </summary>
            <param name="factory">
            A function that will be used to create the object. This will often be a constructor.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.IFactoryComposer`1.FromFactory``1(System.Func{``0,`0})">
            <summary>
            Specifies that a specimen should be created in a particular way, using a single input
            parameter for the factory.
            </summary>
            <typeparam name="TInput">
            The type of input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <param name="factory">
            A function that will be used to create the object. This will often be a constructor
            that takes a single constructor argument of type <typeparamref name="TInput"/>.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.IFactoryComposer`1.FromFactory``2(System.Func{``0,``1,`0})">
            <summary>
            Specifies that a specimen should be created in a particular way, using two input
            parameters for the construction.
            </summary>
            <typeparam name="TInput1">
            The type of the first input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <typeparam name="TInput2">
            The type of the second input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <param name="factory">
            A function that will be used to create the object. This will often be a constructor
            that takes two constructor arguments of type <typeparamref name="TInput1"/> and
            <typeparamref name="TInput2"/>.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.IFactoryComposer`1.FromFactory``3(System.Func{``0,``1,``2,`0})">
            <summary>
            Specifies that a specimen should be created in a particular way, using three input
            parameters for the construction.
            </summary>
            <typeparam name="TInput1">
            The type of the first input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <typeparam name="TInput2">
            The type of the second input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <typeparam name="TInput3">
            The type of the third input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <param name="factory">
            A function that will be used to create the object. This will often be a constructor
            that takes three constructor arguments of type <typeparamref name="TInput1"/>,
            <typeparamref name="TInput2"/> and <typeparamref name="TInput3"/>.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.IFactoryComposer`1.FromFactory``4(System.Func{``0,``1,``2,``3,`0})">
            <summary>
            Specifies that a specimen should be created in a particular way, using four input
            parameters for the construction.
            </summary>
            <typeparam name="TInput1">
            The type of the first input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <typeparam name="TInput2">
            The type of the second input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <typeparam name="TInput3">
            The type of the third input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <typeparam name="TInput4">
            The type of the fourth input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <param name="factory">
            A function that will be used to create the object. This will often be a constructor
            that takes three constructor arguments of type <typeparamref name="TInput1"/>,
            <typeparamref name="TInput2"/>, <typeparamref name="TInput3"/> and
            <typeparamref name="TInput4"/>.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1">
            <summary>
            Provides statements that can be used to control how specimens are post-processed.
            </summary>
            <typeparam name="T">The type of specimen.</typeparam>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1.Do(System.Action{`0})">
            <summary>
            Performs the specified action on a specimen.
            </summary>
            <param name="action">The action to perform.</param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1.OmitAutoProperties">
            <summary>
            Disables auto-properties for a type of specimen.
            </summary>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1.With``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Registers that a writable property or field should be assigned an anonymous value as
            part of specimen post-processing.
            </summary>
            <typeparam name="TProperty">The type of the property of field.</typeparam>
            <param name="propertyPicker">
            An expression that identifies the property or field that will should have a value
            assigned.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1.With``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Registers that a writable property or field should be assigned a specific value as
            part of specimen post-processing.
            </summary>
            <typeparam name="TProperty">The type of the property of field.</typeparam>
            <param name="propertyPicker">
            An expression that identifies the property or field that will have
            <paramref name="value"/> assigned.
            </param>
            <param name="value">
            The value to assign to the property or field identified by
            <paramref name="propertyPicker"/>.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1.WithAutoProperties">
            <summary>
            Enables auto-properties for a type of specimen.
            </summary>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1.Without``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Registers that a writable property should not be assigned any automatic value as
            part of specimen post-processing.
            </summary>
            <typeparam name="TProperty">The type of the property or field to ignore.</typeparam>
            <param name="propertyPicker">
            An expression that identifies the property or field to be ignored.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.BehaviorComposer`1.#ctor(Ploeh.AutoFixture.Dsl.ICustomizationComposer{`0},System.Collections.Generic.IEnumerable{Ploeh.AutoFixture.Kernel.ISpecimenBuilderTransformation})">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.BehaviorComposer`1"/> class.
            </summary>
            <param name="composer">The composer to decorate.</param>
            <param name="behaviors">
            The behaviors which will be applied when <see cref="M:Ploeh.AutoFixture.BehaviorComposer`1.Compose"/> is invoked.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.BehaviorComposer`1.#ctor(Ploeh.AutoFixture.Dsl.ICustomizationComposer{`0},Ploeh.AutoFixture.Kernel.ISpecimenBuilderTransformation[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.BehaviorComposer`1"/> class.
            </summary>
            <param name="composer">The composer to decorate.</param>
            <param name="behaviors">
            The behaviors which will be applied when <see cref="M:Ploeh.AutoFixture.BehaviorComposer`1.Compose"/> is invoked.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.BehaviorComposer`1.With(Ploeh.AutoFixture.Dsl.ICustomizationComposer{`0})">
            <summary>
            Returns a new <see cref="T:Ploeh.AutoFixture.BehaviorComposer`1"/> that decorates the new composer, but
            otherwise preserves other state information of the instance (such as the
            <see cref="P:Ploeh.AutoFixture.BehaviorComposer`1.Behaviors"/>.
            </summary>
            <param name="newComposer">The new composer to decorate.</param>
            <returns>
            A new <see cref="T:Ploeh.AutoFixture.BehaviorComposer`1"/> that decorates <paramref name="newComposer"/>.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.BehaviorComposer`1.With(Ploeh.AutoFixture.Dsl.IPostprocessComposer{`0})">
            <summary>
            Returns a new <see cref="T:Ploeh.AutoFixture.BehaviorPostprocessComposer`1"/> that decorates the new
            composer, but otherwise preserves other state information of the instance (such as the
            <see cref="P:Ploeh.AutoFixture.BehaviorComposer`1.Behaviors"/>.
            </summary>
            <param name="newComposer">The new composer to decorate.</param>
            <returns>
            A new <see cref="T:Ploeh.AutoFixture.BehaviorPostprocessComposer`1"/> that decorates
            <paramref name="newComposer"/>.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.BehaviorComposer`1.FromSeed(System.Func{`0,`0})">
            <summary>
            Specifies a function that defines how to create a specimen from a seed.
            </summary>
            <param name="factory">The factory used to create specimens from seeds.</param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.BehaviorComposer`1.FromFactory(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Specifies an <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> that can create specimens of the
            appropriate type. Mostly for advanced scenarios.
            </summary>
            <param name="factory">
            An <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> that can create specimens of the appropriate type.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.BehaviorComposer`1.FromFactory(System.Func{`0})">
            <summary>
            Specifies that an anonymous object should be created in a particular way; often by
            using a constructor.
            </summary>
            <param name="factory">
            A function that will be used to create the object. This will often be a constructor.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.BehaviorComposer`1.FromFactory``1(System.Func{``0,`0})">
            <summary>
            Specifies that an anonymous object should be created in a particular way; often by
            using a constructor.
            </summary>
            <param name="factory">
            A function that will be used to create the object. This will often be a constructor.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.BehaviorComposer`1.FromFactory``2(System.Func{``0,``1,`0})">
            <summary>
            Specifies that a specimen should be created in a particular way, using two input
            parameters for the construction.
            </summary>
            <typeparam name="TInput1">
            The type of the first input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <typeparam name="TInput2">
            The type of the second input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <param name="factory">
            A function that will be used to create the object. This will often be a constructor
            that takes two constructor arguments of type <typeparamref name="TInput1"/> and
            <typeparamref name="TInput2"/>.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.BehaviorComposer`1.FromFactory``3(System.Func{``0,``1,``2,`0})">
            <summary>
            Specifies that a specimen should be created in a particular way, using three input
            parameters for the construction.
            </summary>
            <typeparam name="TInput1">
            The type of the first input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <typeparam name="TInput2">
            The type of the second input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <typeparam name="TInput3">
            The type of the third input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <param name="factory">
            A function that will be used to create the object. This will often be a constructor
            that takes three constructor arguments of type <typeparamref name="TInput1"/>,
            <typeparamref name="TInput2"/> and <typeparamref name="TInput3"/>.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.BehaviorComposer`1.FromFactory``4(System.Func{``0,``1,``2,``3,`0})">
            <summary>
            Specifies that a specimen should be created in a particular way, using four input
            parameters for the construction.
            </summary>
            <typeparam name="TInput1">
            The type of the first input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <typeparam name="TInput2">
            The type of the second input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <typeparam name="TInput3">
            The type of the third input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <typeparam name="TInput4">
            The type of the fourth input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <param name="factory">
            A function that will be used to create the object. This will often be a constructor
            that takes three constructor arguments of type <typeparamref name="TInput1"/>,
            <typeparamref name="TInput2"/>, <typeparamref name="TInput3"/> and
            <typeparamref name="TInput4"/>.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.BehaviorComposer`1.Compose">
            <summary>
            Composes a new <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> instance.
            </summary>
            <returns>
            A new <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> instance.
            </returns>
            <remarks>
            <para>
            The return value is created from the <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> instances created
            by the decorated <see cref="P:Ploeh.AutoFixture.BehaviorComposer`1.Composer"/>, itself decorated with the decorating builders
            created by <see cref="P:Ploeh.AutoFixture.BehaviorComposer`1.Behaviors"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.BehaviorComposer`1.Do(System.Action{`0})">
            <summary>
            Performs the specified action on a specimen.
            </summary>
            <param name="action">The action to perform.</param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.BehaviorComposer`1.OmitAutoProperties">
            <summary>
            Disables auto-properties for a type of specimen.
            </summary>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.BehaviorComposer`1.With``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Registers that a writable property or field should be assigned an anonymous value as
            part of specimen post-processing.
            </summary>
            <typeparam name="TProperty">The type of the property of field.</typeparam>
            <param name="propertyPicker">
            An expression that identifies the property or field that will should have a value
            assigned.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.BehaviorComposer`1.With``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Registers that a writable property or field should be assigned a specific value as
            part of specimen post-processing.
            </summary>
            <typeparam name="TProperty">The type of the property of field.</typeparam>
            <param name="propertyPicker">
            An expression that identifies the property or field that will have
            <paramref name="value"/> assigned.
            </param>
            <param name="value">
            The value to assign to the property or field identified by
            <paramref name="propertyPicker"/>.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.BehaviorComposer`1.WithAutoProperties">
            <summary>
            Enables auto-properties for a type of specimen.
            </summary>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.BehaviorComposer`1.Without``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Registers that a writable property should not be assigned any automatic value as
            part of specimen post-processing.
            </summary>
            <typeparam name="TProperty">The type of the property or field to ignore.</typeparam>
            <param name="propertyPicker">
            An expression that identifies the property or field to be ignored.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.BehaviorComposer`1.Behaviors">
            <summary>
            Gets the behaviors that will be applied when <see cref="M:Ploeh.AutoFixture.BehaviorComposer`1.Compose"/> is invoked.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.BehaviorComposer`1.Composer">
            <summary>
            Gets the decorated composer.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.BehaviorPostprocessComposer`1">
            <summary>
            A Decorator of <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> that applies behaviors when
            <see cref="M:Ploeh.AutoFixture.BehaviorPostprocessComposer`1.Compose"/> is invoked.
            </summary>
            <typeparam name="T">The type of specimen to customize.</typeparam>
            <remarks>
            <para>
            In this context, a <i>behavior</i> is an <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilderTransformation"/> that
            is used to decorate the <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> composed by the decorated
            <see cref="P:Ploeh.AutoFixture.BehaviorPostprocessComposer`1.Composer"/> with decorating builders.
            </para>
            <para>
            This can be used to ensure that the composed builder is decorated with appropriate builders
            such as <see cref="T:Ploeh.AutoFixture.Kernel.ThrowingRecursionGuard"/> or <see cref="T:Ploeh.AutoFixture.Kernel.TraceWriter"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.BehaviorPostprocessComposer`1.#ctor(Ploeh.AutoFixture.Dsl.IPostprocessComposer{`0},System.Collections.Generic.IEnumerable{Ploeh.AutoFixture.Kernel.ISpecimenBuilderTransformation})">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.BehaviorPostprocessComposer`1"/>
            class.
            </summary>
            <param name="composer">The composer to decorate.</param>
            <param name="behaviors">
            The behaviors which will be applied when <see cref="M:Ploeh.AutoFixture.BehaviorPostprocessComposer`1.Compose"/> is invoked.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.BehaviorPostprocessComposer`1.#ctor(Ploeh.AutoFixture.Dsl.IPostprocessComposer{`0},Ploeh.AutoFixture.Kernel.ISpecimenBuilderTransformation[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.BehaviorPostprocessComposer`1"/> class.
            </summary>
            <param name="composer">The composer to decorate.</param>
            <param name="behaviors">
            The behaviors which will be applied when <see cref="M:Ploeh.AutoFixture.BehaviorPostprocessComposer`1.Compose"/> is invoked.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.BehaviorPostprocessComposer`1.With(Ploeh.AutoFixture.Dsl.IPostprocessComposer{`0})">
            <summary>
            Returns a new <see cref="T:Ploeh.AutoFixture.BehaviorPostprocessComposer`1"/> that decorates the new
            composer, but otherwise preserves other state information of the instance (such as the
            <see cref="P:Ploeh.AutoFixture.BehaviorPostprocessComposer`1.Behaviors"/>.
            </summary>
            <param name="newComposer">The new composer to decorate.</param>
            <returns>
            A new <see cref="T:Ploeh.AutoFixture.BehaviorPostprocessComposer`1"/> that decorates
            <paramref name="newComposer"/>.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.BehaviorPostprocessComposer`1.Do(System.Action{`0})">
            <summary>
            Performs the specified action on a specimen.
            </summary>
            <param name="action">The action to perform.</param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.BehaviorPostprocessComposer`1.OmitAutoProperties">
            <summary>
            Disables auto-properties for a type of specimen.
            </summary>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.BehaviorPostprocessComposer`1.With``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Registers that a writable property or field should be assigned an anonymous value as
            part of specimen post-processing.
            </summary>
            <typeparam name="TProperty">The type of the property of field.</typeparam>
            <param name="propertyPicker">
            An expression that identifies the property or field that will should have a value
            assigned.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.BehaviorPostprocessComposer`1.With``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Registers that a writable property or field should be assigned a specific value as
            part of specimen post-processing.
            </summary>
            <typeparam name="TProperty">The type of the property of field.</typeparam>
            <param name="propertyPicker">
            An expression that identifies the property or field that will have
            <paramref name="value"/> assigned.
            </param>
            <param name="value">
            The value to assign to the property or field identified by
            <paramref name="propertyPicker"/>.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.BehaviorPostprocessComposer`1.WithAutoProperties">
            <summary>
            Enables auto-properties for a type of specimen.
            </summary>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.BehaviorPostprocessComposer`1.Without``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Registers that a writable property should not be assigned any automatic value as
            part of specimen post-processing.
            </summary>
            <typeparam name="TProperty">The type of the property or field to ignore.</typeparam>
            <param name="propertyPicker">
            An expression that identifies the property or field to be ignored.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.BehaviorPostprocessComposer`1.Compose">
            <summary>
            Composes a new <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> instance.
            </summary>
            <returns>
            A new <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> instance.
            </returns>
            <remarks>
            <para>
            The return value is created from the <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> instances created
            by the decorated <see cref="P:Ploeh.AutoFixture.BehaviorPostprocessComposer`1.Composer"/>, itself decorated with the decorating builders
            created by <see cref="P:Ploeh.AutoFixture.BehaviorPostprocessComposer`1.Behaviors"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Ploeh.AutoFixture.BehaviorPostprocessComposer`1.Behaviors">
            <summary>
            Gets the behaviors that will be applied when <see cref="M:Ploeh.AutoFixture.BehaviorPostprocessComposer`1.Compose"/> is invoked.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.BehaviorPostprocessComposer`1.Composer">
            <summary>
            Gets the decorated composer.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.CharSequenceGenerator">
            <summary>
            Creates a sequence of printable ASCII characters (Dec 33-126), starting at '!' (Dec 33).
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder">
            <summary>
            Builds, or partakes in building, anonymous variables (specimens).
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.ISpecimenBuilder.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The requested specimen if possible; otherwise a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
            <remarks>
            <para>
            The <paramref name="request"/> can be any object, but will often be a
            <see cref="T:System.Type"/> or other <see cref="T:System.Reflection.MemberInfo"/> instances.
            </para>
            <para>
            Note to implementers: Implementations are expected to return a
            <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance if they can't satisfy the request.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.CharSequenceGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.CharSequenceGenerator"/> class.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.CharSequenceGenerator.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The requested specimen if possible; otherwise a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.CollectionFiller">
            <summary>
            Contains extension methods for populating collections with specimens.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.CollectionFiller.AddMany``1(System.Collections.Generic.ICollection{``0},System.Func{``0},System.Int32)">
            <summary>
            Adds many objects to a list.
            </summary>
            <typeparam name="T">The type of object contained within the list.</typeparam>
            <param name="collection">The collection to which objects should be added.</param>
            <param name="creator">
            A function that will be called many times to create objects that will be added to
            <paramref name="collection"/>.</param>
            <param name="repeatCount">
            The number of times <paramref name="creator"/> is invoked, and hence the number of
            items added to <paramref name="collection"/>.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.CollectionFiller.AddManyTo``1(Ploeh.AutoFixture.IFixture,System.Collections.Generic.ICollection{``0})">
            <summary>
            Adds many anonymously created objects to a list.
            </summary>
            <typeparam name="T">The type of object that is contained in the list.</typeparam>
            <param name="fixture">The fixture.</param>
            <param name="collection">
            The list to which the anonymously created objects will be added.
            </param>
            <remarks>
            <para>
            The number of objects created and added is determined by
            <see cref="P:Ploeh.AutoFixture.IFixture.RepeatCount"/>.
            </para>
            </remarks>
            <seealso cref="M:Ploeh.AutoFixture.CollectionFiller.AddManyTo``1(Ploeh.AutoFixture.IFixture,System.Collections.Generic.ICollection{``0},System.Int32)"/>
            <seealso cref="M:Ploeh.AutoFixture.CollectionFiller.AddManyTo``1(Ploeh.AutoFixture.IFixture,System.Collections.Generic.ICollection{``0},System.Func{``0})"/>
        </member>
        <member name="M:Ploeh.AutoFixture.CollectionFiller.AddManyTo``1(Ploeh.AutoFixture.IFixture,System.Collections.Generic.ICollection{``0},System.Int32)">
            <summary>
            Adds many anonymously created objects to a list.
            </summary>
            <typeparam name="T">The type of object that is contained in the list.</typeparam>
            <param name="fixture">The fixture.</param>
            <param name="collection">
            The list to which the anonymously created objects will be added.
            </param>
            <param name="repeatCount">The number of objects created and added.</param>
            <seealso cref="M:Ploeh.AutoFixture.CollectionFiller.AddManyTo``1(Ploeh.AutoFixture.IFixture,System.Collections.Generic.ICollection{``0})"/>
            <seealso cref="M:Ploeh.AutoFixture.CollectionFiller.AddManyTo``1(Ploeh.AutoFixture.IFixture,System.Collections.Generic.ICollection{``0},System.Func{``0})"/>
        </member>
        <member name="M:Ploeh.AutoFixture.CollectionFiller.AddManyTo``1(Ploeh.AutoFixture.IFixture,System.Collections.Generic.ICollection{``0},System.Func{``0})">
            <summary>
            Adds many objects to a list using the provided function to create each object.
            </summary>
            <typeparam name="T">The type of object that is contained in the list.</typeparam>
            <param name="fixture">The fixture.</param>
            <param name="collection">
            The list to which the created objects will be added.
            </param>
            <param name="creator">
            The function that creates each object which is subsequently added to
            <paramref name="collection"/>.
            </param>
            <remarks>
            <para>
            The number of objects created and added is determined by
            <see cref="P:Ploeh.AutoFixture.IFixture.RepeatCount"/>.
            </para>
            </remarks>
            <seealso cref="M:Ploeh.AutoFixture.CollectionFiller.AddManyTo``1(Ploeh.AutoFixture.IFixture,System.Collections.Generic.ICollection{``0})"/>
            <seealso cref="M:Ploeh.AutoFixture.CollectionFiller.AddManyTo``1(Ploeh.AutoFixture.IFixture,System.Collections.Generic.ICollection{``0},System.Int32)"/>
        </member>
        <member name="T:Ploeh.AutoFixture.CompositeCustomization">
            <summary>
            Customizes an <see cref="T:Ploeh.AutoFixture.IFixture"/> by using all contained <see cref="P:Ploeh.AutoFixture.CompositeCustomization.Customizations"/>.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.ICustomization">
            <summary>
            Encapsulates a customization of an <see cref="T:Ploeh.AutoFixture.IFixture"/>.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.ICustomization.Customize(Ploeh.AutoFixture.IFixture)">
            <summary>
            Customizes the specified fixture.
            </summary>
            <param name="fixture">The fixture to customize.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.CompositeCustomization.#ctor(System.Collections.Generic.IEnumerable{Ploeh.AutoFixture.ICustomization})">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.CompositeCustomization"/> class.
            </summary>
            <param name="customizations">The customizations.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.CompositeCustomization.#ctor(Ploeh.AutoFixture.ICustomization[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.CompositeCustomization"/> class.
            </summary>
            <param name="customizations">The customizations.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.CompositeCustomization.Customize(Ploeh.AutoFixture.IFixture)">
            <summary>
            Customizes the specified fixture.
            </summary>
            <param name="fixture">The fixture to customize.</param>
        </member>
        <member name="P:Ploeh.AutoFixture.CompositeCustomization.Customizations">
            <summary>
            Gets the customizations contained within this instance.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.ConstrainedStringGenerator">
            <summary>
            Creates a constrained string.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.ConstrainedStringGenerator.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a constrained string based on a ConstrainedStringRequest.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The requested number if possible; otherwise a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.CurrentDateTimeCustomization">
            <summary>
            A customization that enables DateTime specimens to be based on the current <see cref="P:DateTime.Now"/> value.
            </summary>
            <remarks>
            <para>
            When this customization is added to an <see cref="T:Ploeh.AutoFixture.IFixture"/> instance, requests for DateTime specimens
            will be satisfied by returning the current <see cref="P:DateTime.Now"/> value.
            </para>
            <para>
            This customization reproduces the generation strategy for DateTime specimens used in AutoFixture up to version 2.1.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.CurrentDateTimeCustomization.Customize(Ploeh.AutoFixture.IFixture)">
            <summary>
            Customizes the specified fixture by adding the <see cref="T:System.Type"/> specific numeric sequence generators.
            </summary>
            <param name="fixture">The fixture to customize.</param>
        </member>
        <member name="T:Ploeh.AutoFixture.CurrentDateTimeGenerator">
            <summary>
            Creates new <see cref="T:System.DateTime"/> specimens based on the current <see cref="P:DateTime.Now"/> value.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.CurrentDateTimeGenerator.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new <see cref="T:System.DateTime"/> instance.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            A new <see cref="T:System.DateTime"/> instance, if <paramref name="request"/> is a request for a
            <see cref="T:System.DateTime"/>; otherwise, a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.DataAnnotations.Automaton">
            <summary>
            Finite-state automaton with regular expression operations.
            <p>
            Class invariants:
            <ul>
            <li>
            An automaton is either represented explicitly (with State and Transition} objects)
            or with a singleton string (see Singleton property ExpandSingleton() method) in case the
            automaton is known to accept exactly one string. (Implicitly, all states and transitions of
            an automaton are reachable from its initial state.)
            </li>
            <li>
            Automata are always reduced (see method Rreduce()) and have no transitions to dead states
            (see RemoveDeadTransitions() method).
            </li>
            <li>
            If an automaton is non deterministic, then IsDeterministic property returns false (but the
            converse is not required).
            </li>
            <li>
            Automata provided as input to operations are generally assumed to be disjoint.
            </li>
            </ul>
            </p>
            If the states or transitions are manipulated manually, the RestoreInvariant() method and
            SetDeterministic(bool) methods should be used afterwards to restore representation invariants
            that are assumed by the built-in automata operations.
            </summary>
        </member>
        <member name="F:Ploeh.AutoFixture.DataAnnotations.Automaton.MinimizeHuffman">
            <summary>
            Minimize using Huffman's O(n<sup>2</sup>) algorithm.
              This is the standard text-book algorithm.
            </summary>
        </member>
        <member name="F:Ploeh.AutoFixture.DataAnnotations.Automaton.MinimizeBrzozowski">
            <summary>
            Minimize using Brzozowski's O(2<sup>n</sup>) algorithm. 
              This algorithm uses the reverse-determinize-reverse-determinize trick, which has a bad
              worst-case behavior but often works very well in practice even better than Hopcroft's!).
            </summary>
        </member>
        <member name="F:Ploeh.AutoFixture.DataAnnotations.Automaton.MinimizeHopcroft">
            <summary>
            Minimize using Hopcroft's O(n log n) algorithm.
              This is regarded as one of the most generally efficient algorithms that exist.
            </summary>
        </member>
        <member name="F:Ploeh.AutoFixture.DataAnnotations.Automaton.allowMutation">
            <summary>
            Selects whether operations may modify the input automata (default: <code>false</code>).
            </summary>
        </member>
        <member name="F:Ploeh.AutoFixture.DataAnnotations.Automaton.minimizeAlways">
            <summary>
            Minimize always flag.
            </summary>
        </member>
        <member name="F:Ploeh.AutoFixture.DataAnnotations.Automaton.hashCode">
            <summary>
            The hash code.
            </summary>
        </member>
        <member name="F:Ploeh.AutoFixture.DataAnnotations.Automaton.initial">
            <summary>
            The initial.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Automaton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.DataAnnotations.Automaton"/> class that accepts the empty 
              language. Using this constructor, automata can be constructed manually from 
              <see cref="T:Ploeh.AutoFixture.DataAnnotations.State"/> and <see cref="T:Ploeh.AutoFixture.DataAnnotations.Transition"/> objects.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Automaton.SetAllowMutate(System.Boolean)">
            <summary>
            Sets or resets allow mutate flag. If this flag is set, then all automata operations
            may modify automata given as input; otherwise, operations will always leave input
            automata languages unmodified. By default, the flag is not set.
            </summary>
            <param name="flag">if set to <c>true</c> then all automata operations may modify 
            automata given as input; otherwise, operations will always leave input automata 
            languages unmodified..</param>
            <returns>The previous value of the flag.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Automaton.SetMinimizeAlways(System.Boolean)">
            <summary>
            Sets or resets minimize always flag. If this flag is set, then {@link #minimize()} 
            will automatically be invoked after all operations that otherwise may produce 
            non-minimal automata. By default, the flag is not set.
            </summary>
            <param name="flag">The flag if true, the flag is set.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Automaton.SetStateNumbers(System.Collections.Generic.IEnumerable{Ploeh.AutoFixture.DataAnnotations.State})">
            <summary>
            Assigns consecutive numbers to the given states.
            </summary>
            <param name="states">The states.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Automaton.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures
            like a hash table. 
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Automaton.CheckMinimizeAlways">
            <summary>
            The check minimize always.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Automaton.ClearHashCode">
            <summary>
            The clear hash code.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Automaton.Clone">
            <summary>
            Creates a shallow copy of the current Automaton.
            </summary>
            <returns>
            A shallow copy of the current Automaton.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Automaton.CloneExpanded">
            <summary>
            A clone of this automaton, expands if singleton.
            </summary>
            <returns>
            Returns a clone of this automaton, expands if singleton.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Automaton.CloneExpandedIfRequired">
            <summary>
            A clone of this automaton unless 
            <code>
            allowMutation
            </code>
            is set, expands if singleton.
            </summary>
            <returns>
            Returns a clone of this automaton unless 
            <code>
            allowMutation
            </code>
            is set, expands if singleton.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Automaton.CloneIfRequired">
            <summary>
            Returns a clone of this automaton, or this automaton itself if <code>allow_mutation</code>
            flag is set.
            </summary>
            <returns>A clone of this automaton, or this automaton itself if <code>allow_mutation</code>
            flag is set.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Automaton.ExpandSingleton">
            <summary>
            Expands singleton representation to normal representation.
            Does nothing if not in singleton representation.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Automaton.GetAcceptStates">
            <summary>
            The set of reachable accept states.
            </summary>
            <returns>Returns the set of reachable accept states.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Automaton.GetLiveStates">
            <summary>
            Returns the set of live states. A state is "live" if an accept state is reachable from it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Automaton.GetStartPoints">
            <summary>
            The sorted array of all interval start points.
            </summary>
            <returns>Returns sorted array of all interval start points.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Automaton.GetStates">
            <summary>
            Gets the set of states that are reachable from the initial state.
            </summary>
            <returns>
            The set of states that are reachable from the initial state.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Automaton.Minimize">
            <summary>
            The minimize.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Automaton.RecomputeHashCode">
            <summary>
            Recomputes the hash code.
              The automaton must be minimal when this operation is performed.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Automaton.Reduce">
            <summary>
            Reduces this automaton.
            An automaton is "reduced" by combining overlapping and adjacent edge intervals with same 
            destination.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Automaton.RemoveDeadTransitions">
            <summary>
            Removes transitions to dead states and calls Reduce() and ClearHashCode().
            (A state is "dead" if no accept state is reachable from it).
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Automaton.Totalize">
            <summary>
            Adds transitions to explicit crash state to ensure that transition function is total.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.DataAnnotations.Automaton.Minimization">
            <summary>
            Gets the minimization algorithm (default: 
            <code>
            MINIMIZE_HOPCROFT
            </code>
            ).
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.DataAnnotations.Automaton.AllowMutation">
            <summary>
            Gets or sets a value indicating whether operations may modify the input automata.
            </summary>
            <value>
            <c>true</c> if [allow mutation]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ploeh.AutoFixture.DataAnnotations.Automaton.IsDeterministic">
            <summary>
            Gets or sets a value indicating whether this automaton is definitely deterministic (i.e.,
              there are no choices for any run, but a run may crash).
            </summary>
            <value>
            <c>true</c> then this automaton is definitely deterministic (i.e., there are no 
              choices for any run, but a run may crash)., <c>false</c>.
            </value>
        </member>
        <member name="P:Ploeh.AutoFixture.DataAnnotations.Automaton.Initial">
            <summary>
            Gets or sets the initial state of this automaton.
            </summary>
            <value>
            The initial state of this automaton.
            </value>
        </member>
        <member name="P:Ploeh.AutoFixture.DataAnnotations.Automaton.Singleton">
            <summary>
            Gets or sets the singleton string for this automaton. An automaton that accepts exactly one
             string <i>may</i> be represented in singleton mode. In that case, this method may be 
            used to obtain the string.
            </summary>
            <value>The singleton string, null if this automaton is not in singleton mode.</value>
        </member>
        <member name="P:Ploeh.AutoFixture.DataAnnotations.Automaton.IsSingleton">
            <summary>
            Gets or sets a value indicating whether this instance is singleton.
            </summary>
            <value>
            <c>true</c> if this instance is singleton; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ploeh.AutoFixture.DataAnnotations.Automaton.IsDebug">
            <summary>
            Gets or sets a value indicating whether this instance is debug.
            </summary>
            <value>
            <c>true</c> if this instance is debug; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ploeh.AutoFixture.DataAnnotations.Automaton.IsEmpty">
            <summary>
            Gets or sets a value indicating whether IsEmpty.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.DataAnnotations.Automaton.NumberOfStates">
            <summary>
            Gets the number of states in this automaton.
            </summary>
            Returns the number of states in this automaton.
        </member>
        <member name="P:Ploeh.AutoFixture.DataAnnotations.Automaton.NumberOfTransitions">
            <summary>
            Gets the number of transitions in this automaton. This number is counted
              as the total number of edges, where one edge may be a character interval.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.BasicAutomata.MakeAnyChar">
            <summary>
            Returns a new (deterministic) automaton that accepts any single character.
            </summary>
            <returns>A new (deterministic) automaton that accepts any single character.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.BasicAutomata.MakeAnyString">
            <summary>
            Returns a new (deterministic) automaton that accepts all strings.
            </summary>
            <returns>
            A new (deterministic) automaton that accepts all strings.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.BasicAutomata.MakeChar(System.Char)">
            <summary>
            Returns a new (deterministic) automaton that accepts a single character of the given value.
            </summary>
            <param name="c">The c.</param>
            <returns>A new (deterministic) automaton that accepts a single character of the given value.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.BasicAutomata.MakeCharRange(System.Char,System.Char)">
            <summary>
            Returns a new (deterministic) automaton that accepts a single char whose value is in the
            given interval (including both end points).
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>
            A new (deterministic) automaton that accepts a single char whose value is in the
            given interval (including both end points).
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.BasicAutomata.MakeEmpty">
            <summary>
            Returns a new (deterministic) automaton with the empty language.
            </summary>
            <returns>
            A new (deterministic) automaton with the empty language.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.BasicAutomata.MakeEmptyString">
            <summary>
            Returns a new (deterministic) automaton that accepts only the empty string.
            </summary>
            <returns>
            A new (deterministic) automaton that accepts only the empty string.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.BasicAutomata.MakeInterval(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a new automaton that accepts strings representing decimal non-negative integers in
            the given interval.
            </summary>
            <param name="min">The minimum value of interval.</param>
            <param name="max">The maximum value of inverval (both end points are included in the 
            interval).</param>
            <param name="digits">If f >0, use fixed number of digits (strings must be prefixed by 0's 
            to obtain the right length) otherwise, the number of digits is not fixed.</param>
            <returns>A new automaton that accepts strings representing decimal non-negative integers 
            in the given interval.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.BasicAutomata.MakeString(System.String)">
            <summary>
            Returns a new (deterministic) automaton that accepts the single given string.
            </summary>
            <param name="s">The string.</param>
            <returns>A new (deterministic) automaton that accepts the single given string.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.BasicAutomata.AnyOfRightLength(System.String,System.Int32)">
            <summary>
            Constructs sub-automaton corresponding to decimal numbers of length x.Substring(n).Length.
            </summary>
            <param name="x">The x.</param>
            <param name="n">The n.</param>
            <returns></returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.BasicAutomata.AtLeast(System.String,System.Int32,System.Collections.Generic.ICollection{Ploeh.AutoFixture.DataAnnotations.State},System.Boolean)">
            <summary>
            Constructs sub-automaton corresponding to decimal numbers of value at least x.Substring(n)
            and length x.Substring(n).Length.
            </summary>
            <param name="x">The x.</param>
            <param name="n">The n.</param>
            <param name="initials">The initials.</param>
            <param name="zeros">if set to <c>true</c> [zeros].</param>
            <returns></returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.BasicAutomata.AtMost(System.String,System.Int32)">
            <summary>
            Constructs sub-automaton corresponding to decimal numbers of value at most x.Substring(n)
            and length x.Substring(n).Length.
            </summary>
            <param name="x">The x.</param>
            <param name="n">The n.</param>
            <returns></returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.BasicAutomata.Between(System.String,System.String,System.Int32,System.Collections.Generic.ICollection{Ploeh.AutoFixture.DataAnnotations.State},System.Boolean)">
            <summary>
            Constructs sub-automaton corresponding to decimal numbers of value between x.Substring(n)
            and y.Substring(n) and of length x.Substring(n).Length (which must be equal to 
            y.Substring(n).Length).
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="n">The n.</param>
            <param name="initials">The initials.</param>
            <param name="zeros">if set to <c>true</c> [zeros].</param>
            <returns></returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.BasicAutomata.MakeCharSet(System.String)">
            <summary>
            Returns a new (deterministic) automaton that accepts a single character in the given set.
            </summary>
            <param name="set">The set.</param>
            <returns></returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.BasicAutomata.MakeMaxInteger(System.String)">
            <summary>
            Constructs automaton that accept strings representing nonnegative integer that are not 
            larger than the given value.
            </summary>
            <param name="n">The n string representation of maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.BasicAutomata.MakeMinInteger(System.String)">
            <summary>
            Constructs automaton that accept strings representing nonnegative integers that are not
            less that the given value.
            </summary>
            <param name="n">The n string representation of minimum value.</param>
            <returns></returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.BasicAutomata.MakeTotalDigits(System.Int32)">
            <summary>
            Constructs automaton that accept strings representing decimal numbers that can be 
            written with at most the given number of digits. Surrounding whitespace is permitted.
            </summary>
            <param name="i">The i max number of necessary digits.</param>
            <returns></returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.BasicAutomata.MakeFractionDigits(System.Int32)">
            <summary>
            Constructs automaton that accept strings representing decimal numbers that can be 
            written with at most the given number of digits in the fraction part. Surrounding
            whitespace is permitted.
            </summary>
            <param name="i">The i max number of necessary fraction digits.</param>
            <returns></returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.BasicAutomata.MakeStringMatcher(System.String)">
            <summary>
            Constructs deterministic automaton that matches strings that contain the given substring.
            </summary>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.BasicOperations.AddEpsilons(Ploeh.AutoFixture.DataAnnotations.Automaton,System.Collections.Generic.ICollection{Ploeh.AutoFixture.DataAnnotations.StatePair})">
            <summary>
            Adds epsilon transitions to the given automaton. This method adds extra character interval
            transitions that are equivalent to the given set of epsilon transitions.
            </summary>
            <param name="a">The automaton.</param>
            <param name="pairs">A collection of <see cref="T:Ploeh.AutoFixture.DataAnnotations.StatePair"/> objects representing pairs of
            source/destination states where epsilon transitions should be added.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.BasicOperations.Union(System.Collections.Generic.IList{Ploeh.AutoFixture.DataAnnotations.Automaton})">
            <summary>
            Returns an automaton that accepts the union of the languages of the given automata.
            </summary>
            <param name="automatons">The l.</param>
            <returns>
            An automaton that accepts the union of the languages of the given automata.
            </returns>
            <remarks>
            Complexity: linear in number of states.
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.BasicOperations.Complement(Ploeh.AutoFixture.DataAnnotations.Automaton)">
            <summary>
            Returns a (deterministic) automaton that accepts the complement of the language of the 
            given automaton.
            </summary>
            <param name="a">The automaton.</param>
            <returns>A (deterministic) automaton that accepts the complement of the language of the 
            given automaton.</returns>
            <remarks>
            Complexity: linear in number of states (if already deterministic).
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.BasicOperations.Determinize(Ploeh.AutoFixture.DataAnnotations.Automaton)">
            <summary>
            Determinizes the specified automaton.
            </summary>
            <remarks>
            Complexity: exponential in number of states.
            </remarks>
            <param name="a">The automaton.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.BasicOperations.Determinize(Ploeh.AutoFixture.DataAnnotations.Automaton,System.Collections.Generic.List{Ploeh.AutoFixture.DataAnnotations.State})">
            <summary>
            Determinizes the given automaton using the given set of initial states.
            </summary>
            <param name="a">The automaton.</param>
            <param name="initialset">The initial states.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.BasicOperations.IsEmpty(Ploeh.AutoFixture.DataAnnotations.Automaton)">
            <summary>
            Determines whether the given automaton accepts no strings.
            </summary>
            <param name="a">The automaton.</param>
            <returns>
              <c>true</c> if the given automaton accepts no strings; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.BasicOperations.IsEmptyString(Ploeh.AutoFixture.DataAnnotations.Automaton)">
            <summary>
            Determines whether the given automaton accepts the empty string and nothing else.
            </summary>
            <param name="a">The automaton.</param>
            <returns>
              <c>true</c> if the given automaton accepts the empty string and nothing else; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.BasicOperations.Intersection(Ploeh.AutoFixture.DataAnnotations.Automaton,Ploeh.AutoFixture.DataAnnotations.Automaton)">
            <summary>
            Returns an automaton that accepts the intersection of the languages of the given automata.
            Never modifies the input automata languages.
            </summary>
            <param name="a1">The a1.</param>
            <param name="a2">The a2.</param>
            <returns></returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.BasicOperations.Optional(Ploeh.AutoFixture.DataAnnotations.Automaton)">
            <summary>
            Returns an automaton that accepts the union of the empty string and the language of the 
            given automaton.
            </summary>
            <param name="a">The automaton.</param>
            <remarks>
            Complexity: linear in number of states.
            </remarks>
            <returns>An automaton that accepts the union of the empty string and the language of the 
            given automaton.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.BasicOperations.Repeat(Ploeh.AutoFixture.DataAnnotations.Automaton)">
            <summary>
            Accepts the Kleene star (zero or more concatenated repetitions) of the language of the
            given automaton. Never modifies the input automaton language.
            </summary>
            <param name="a">The automaton.</param>
            <returns>
            An automaton that accepts the Kleene star (zero or more concatenated repetitions)
            of the language of the given automaton. Never modifies the input automaton language.
            </returns>
            <remarks>
            Complexity: linear in number of states.
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.BasicOperations.Repeat(Ploeh.AutoFixture.DataAnnotations.Automaton,System.Int32)">
            <summary>
            Accepts <code>min</code> or more concatenated repetitions of the language of the given 
            automaton.
            </summary>
            <param name="a">The automaton.</param>
            <param name="min">The minimum concatenated repetitions of the language of the given 
            automaton.</param>
            <returns>Returns an automaton that accepts <code>min</code> or more concatenated 
            repetitions of the language of the given automaton.
            </returns>
            <remarks>
            Complexity: linear in number of states and in <code>min</code>.
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.BasicOperations.Repeat(Ploeh.AutoFixture.DataAnnotations.Automaton,System.Int32,System.Int32)">
            <summary>
            Accepts between <code>min</code> and <code>max</code> (including both) concatenated
            repetitions of the language of the given automaton.
            </summary>
            <param name="a">The automaton.</param>
            <param name="min">The minimum concatenated repetitions of the language of the given
            automaton.</param>
            <param name="max">The maximum concatenated repetitions of the language of the given
            automaton.</param>
            <returns>
            Returns an automaton that accepts between <code>min</code> and <code>max</code>
            (including both) concatenated repetitions of the language of the given automaton.
            </returns>
            <remarks>
            Complexity: linear in number of states and in <code>min</code> and <code>max</code>.
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.BasicOperations.Run(Ploeh.AutoFixture.DataAnnotations.Automaton,System.String)">
            <summary>
            Returns true if the given string is accepted by the automaton.
            </summary>
            <param name="a">The automaton.</param>
            <param name="s">The string.</param>
            <returns></returns>
            <remarks>
            Complexity: linear in the length of the string.
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.ListEqualityComparer`1.op_Equality(Ploeh.AutoFixture.DataAnnotations.ListEqualityComparer{`0},Ploeh.AutoFixture.DataAnnotations.ListEqualityComparer{`0})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.ListEqualityComparer`1.op_Inequality(Ploeh.AutoFixture.DataAnnotations.ListEqualityComparer{`0},Ploeh.AutoFixture.DataAnnotations.ListEqualityComparer{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.ListEqualityComparer`1.Equals(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.ListEqualityComparer`1.GetHashCode(System.Collections.Generic.List{`0})">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The obj.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.
              </exception>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.ListEqualityComparer`1.Equals(Ploeh.AutoFixture.DataAnnotations.ListEqualityComparer{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.
                            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.ListEqualityComparer`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current
             <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current 
            <see cref="T:System.Object"/>. 
            </param>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.ListEqualityComparer`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.MinimizationOperations.Minimize(Ploeh.AutoFixture.DataAnnotations.Automaton)">
            <summary>
            Minimizes (and determinizes if not already deterministic) the given automaton.
            </summary>
            <param name="a">The automaton.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.MinimizationOperations.MinimizeBrzozowski(Ploeh.AutoFixture.DataAnnotations.Automaton)">
            <summary>
            Minimizes the given automaton using Brzozowski's algorithm.
            </summary>
            <param name="a">The automaton.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.MinimizationOperations.MinimizeHuffman(Ploeh.AutoFixture.DataAnnotations.Automaton)">
            <summary>
            Minimizes the given automaton using Huffman's algorithm.
            </summary>
            <param name="a">The automaton.</param>
        </member>
        <member name="T:Ploeh.AutoFixture.DataAnnotations.RangeAttributeRelay">
            <summary>
            Relays a request for a range number to a <see cref="T:Ploeh.AutoFixture.Kernel.RangedNumberRequest"/>.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.RangeAttributeRelay.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a requested range.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A container that can be used to create other specimens.</param>
            <returns>
            A specimen created from a <see cref="T:Ploeh.AutoFixture.Kernel.RangedNumberRequest"/> encapsulating the operand
            type, the minimum and the maximum of the requested number, if possible; otherwise,
            a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.DataAnnotations.RegExp">
            <summary>
            Regular Expression extension to Automaton.
            </summary>
        </member>
        <member name="F:Ploeh.AutoFixture.DataAnnotations.RegExp.intersection">
            <summary>
              Syntax flag, enables intersection.
            </summary>
        </member>
        <member name="F:Ploeh.AutoFixture.DataAnnotations.RegExp.complement">
            <summary>
              Syntax flag, enables complement.
            </summary>
        </member>
        <member name="F:Ploeh.AutoFixture.DataAnnotations.RegExp.empty">
            <summary>
              Syntax flag, enables empty language.
            </summary>
        </member>
        <member name="F:Ploeh.AutoFixture.DataAnnotations.RegExp.anystring">
            <summary>
              Syntax flag, enables anystring.
            </summary>
        </member>
        <member name="F:Ploeh.AutoFixture.DataAnnotations.RegExp.automaton">
            <summary>
              Syntax flag, enables named automata.
            </summary>
        </member>
        <member name="F:Ploeh.AutoFixture.DataAnnotations.RegExp.interval">
            <summary>
              Syntax flag, enables numerical intervals.
            </summary>
        </member>
        <member name="F:Ploeh.AutoFixture.DataAnnotations.RegExp.all">
            <summary>
              Syntax flag, enables all optional regexp syntax.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.RegExp.#ctor">
            <summary>
              Prevents a default instance of the <see cref="T:Ploeh.AutoFixture.DataAnnotations.RegExp"/> class from being created.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.RegExp.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.DataAnnotations.RegExp"/> class from a string.
            </summary>
            <param name="s">A string with the regular expression.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.RegExp.#ctor(System.String,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.DataAnnotations.RegExp"/> class from a string.
            </summary>
            <param name="s">A string with the regular expression.</param>
            <param name="syntaxFlags">Boolean 'or' of optional syntax constructs to be enabled.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.RegExp.ToAutomaton">
            <summary>
              Constructs new <code>Automaton</code> from this <code>RegExp</code>. 
              Same as <code>toAutomaton(null)</code> (empty automaton map).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.RegExp.ToAutomaton(System.Boolean)">
            <summary>
            Constructs new <code>Automaton</code> from this <code>RegExp</code>.
            Same as <code>toAutomaton(null,minimize)</code> (empty automaton map).
            </summary>
            <param name="minimize">if set to <c>true</c> [minimize].</param>
            <returns></returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.RegExp.ToAutomaton(Ploeh.AutoFixture.DataAnnotations.IAutomatonProvider)">
            <summary>
              Constructs new <code>Automaton</code> from this <code>RegExp</code>. 
              The constructed automaton is minimal and deterministic and has no 
              transitions to dead states.
            </summary>
            <param name = "automatonProvider">The provider of automata for named identifiers.</param>
            <returns></returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.RegExp.ToAutomaton(Ploeh.AutoFixture.DataAnnotations.IAutomatonProvider,System.Boolean)">
            <summary>
              Constructs new <code>Automaton</code> from this <code>RegExp</code>. 
              The constructed automaton has no transitions to dead states.
            </summary>
            <param name = "automatonProvider">The provider of automata for named identifiers.</param>
            <param name = "minimize">if set to <c>true</c> the automaton is minimized and determinized.</param>
            <returns></returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.RegExp.ToAutomaton(System.Collections.Generic.IDictionary{System.String,Ploeh.AutoFixture.DataAnnotations.Automaton})">
            <summary>
              Constructs new <code>Automaton</code> from this <code>RegExp</code>. 
              The constructed automaton is minimal and deterministic and has no 
              transitions to dead states.
            </summary>
            <param name = "automata">The a map from automaton identifiers to automata.</param>
            <returns></returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.RegExp.ToAutomaton(System.Collections.Generic.IDictionary{System.String,Ploeh.AutoFixture.DataAnnotations.Automaton},System.Boolean)">
            <summary>
              Constructs new <code>Automaton</code> from this <code>RegExp</code>. 
              The constructed automaton has no transitions to dead states.
            </summary>
            <param name = "automata">The map from automaton identifiers to automata.</param>
            <param name = "minimize">if set to <c>true</c> the automaton is minimized and determinized.</param>
            <returns></returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.RegExp.SetAllowMutate(System.Boolean)">
            <summary>
              Sets or resets allow mutate flag.
              If this flag is set, then automata construction uses mutable automata,
              which is slightly faster but not thread safe.
            </summary>
            <param name = "flag">if set to <c>true</c> the flag is set.</param>
            <returns>The previous value of the flag.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.RegExp.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents the parsed regular expression.
            </summary>
            <returns>
              A <see cref="T:System.String"/> that represents the parsed regular expression.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.RegExp.GetIdentifiers">
            <summary>
            Returns the set of automaton identifiers that occur in this regular expression.
            </summary>
            <returns>The set of automaton identifiers that occur in this regular expression.</returns>
        </member>
        <member name="T:Ploeh.AutoFixture.DataAnnotations.RegularExpressionAttributeRelay">
            <summary>
            Relays a request for a string that matches a regular expression to a <see cref="T:Ploeh.AutoFixture.Kernel.RegularExpressionRequest"/>.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.RegularExpressionAttributeRelay.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The requested specimen if possible; otherwise a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.DataAnnotations.SpecialOperations">
            <summary>
            Special automata operations.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.SpecialOperations.Reverse(Ploeh.AutoFixture.DataAnnotations.Automaton)">
            <summary>
            Reverses the language of the given (non-singleton) automaton while returning the set of 
            new initial states.
            </summary>
            <param name="a">The automaton.</param>
            <returns></returns>
        </member>
        <member name="T:Ploeh.AutoFixture.DataAnnotations.State">
            <summary>
            <tt>Automaton</tt> state.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.State.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.DataAnnotations.State"/> class. Initially, the new state is a 
              reject state.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.State.op_Equality(Ploeh.AutoFixture.DataAnnotations.State,Ploeh.AutoFixture.DataAnnotations.State)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.State.op_Inequality(Ploeh.AutoFixture.DataAnnotations.State,Ploeh.AutoFixture.DataAnnotations.State)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.State.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current
             <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current
             <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current 
            <see cref="T:System.Object"/>. 
                            </param><exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.State.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.State.Equals(Ploeh.AutoFixture.DataAnnotations.State)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.
                            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.State.CompareTo(Ploeh.AutoFixture.DataAnnotations.State)">
            <summary>
            Compares the current object with another object of the same type. States are ordered by 
            the time of construction.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            Value
            Meaning
            Less than zero
            This object is less than the <paramref name="other"/> parameter.
            Zero
            This object is equal to <paramref name="other"/>.
            Greater than zero
            This object is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.State.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> describing this state.
            </summary>
            <returns>
            A <see cref="T:System.String"/> describing this state.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.State.AddTransition(Ploeh.AutoFixture.DataAnnotations.Transition)">
            <summary>
            Adds an outgoing transition.
            </summary>
            <param name="t">
            The transition.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.State.Step(System.Char)">
            <summary>
            Performs lookup in transitions, assuming determinism.
            </summary>
            <param name="c">
            The character to look up.
            </param>
            <returns>
            The destination state, null if no matching outgoing transition.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.State.Step(System.Char,System.Collections.Generic.List{Ploeh.AutoFixture.DataAnnotations.State})">
            <summary>
            Performs lookup in transitions, allowing nondeterminism.
            </summary>
            <param name="c">
            The character to look up.
            </param>
            <param name="dest">
            The collection where destination states are stored.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.State.GetSortedTransitions(System.Boolean)">
            <summary>
            Gets the transitions sorted by (min, reverse max, to) or (to, min, reverse max).
            </summary>
            <param name="toFirst">
            if set to <c>true</c> [to first].
            </param>
            <returns>
            The transitions sorted by (min, reverse max, to) or (to, min, reverse max).
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.DataAnnotations.State.Id">
            <summary>
            Gets the id.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.DataAnnotations.State.Accept">
            <summary>
            Gets or sets a value indicating whether this State is Accept.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.DataAnnotations.State.Number">
            <summary>
            Gets or sets this State Number.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.DataAnnotations.State.Transitions">
            <summary>
            Gets or sets this State Transitions.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.StateEqualityComparer.Equals(Ploeh.AutoFixture.DataAnnotations.State,Ploeh.AutoFixture.DataAnnotations.State)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <paramref name="x"/> to compare.</param>
            <param name="y">The second object of type <paramref name="y"/> to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.StateEqualityComparer.GetHashCode(Ploeh.AutoFixture.DataAnnotations.State)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The obj.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures
            like a hash table. 
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.
              </exception>
        </member>
        <member name="T:Ploeh.AutoFixture.DataAnnotations.StatePair">
            <summary>
            Pair of states.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.StatePair.#ctor(Ploeh.AutoFixture.DataAnnotations.State,Ploeh.AutoFixture.DataAnnotations.State,Ploeh.AutoFixture.DataAnnotations.State)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.DataAnnotations.StatePair"/> class.
            </summary>
            <param name="s">The s.</param>
            <param name="s1">The s1.</param>
            <param name="s2">The s2.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.StatePair.#ctor(Ploeh.AutoFixture.DataAnnotations.State,Ploeh.AutoFixture.DataAnnotations.State)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.DataAnnotations.StatePair"/> class.
            </summary>
            <param name="s1">The first state.</param>
            <param name="s2">The second state.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.StatePair.op_Equality(Ploeh.AutoFixture.DataAnnotations.StatePair,Ploeh.AutoFixture.DataAnnotations.StatePair)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.StatePair.op_Inequality(Ploeh.AutoFixture.DataAnnotations.StatePair,Ploeh.AutoFixture.DataAnnotations.StatePair)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.StatePair.Equals(Ploeh.AutoFixture.DataAnnotations.StatePair)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise,
             false.
            </returns>
            <param name="other">An object to compare with this object.
                            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.StatePair.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current
             <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current
             <see cref="T:System.Object"/>. 
                            </param><exception cref="T:System.NullReferenceException">The 
            <paramref name="obj"/> parameter is null.
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.StatePair.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Ploeh.AutoFixture.DataAnnotations.StatePair.FirstState">
            <summary>
            Gets or sets the first component of this pair.
            </summary>
            <value>
            The first state.
            </value>
        </member>
        <member name="P:Ploeh.AutoFixture.DataAnnotations.StatePair.SecondState">
            <summary>
            Gets or sets the second component of this pair.
            </summary>
            <value>
            The second state.
            </value>
        </member>
        <member name="T:Ploeh.AutoFixture.DataAnnotations.StringLengthAttributeRelay">
            <summary>
            Relays a request for a constrained string to a <see cref="T:Ploeh.AutoFixture.Kernel.ConstrainedStringRequest"/>.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.StringLengthAttributeRelay.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a specified length of characters that are allowed.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A container that can be used to create other specimens.</param>
            <returns>
            A specimen created from a <see cref="T:Ploeh.AutoFixture.Kernel.RangedNumberRequest"/> encapsulating the operand
            type, the minimum and the maximum of the requested number, if possible; otherwise,
            a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.DataAnnotations.Transition">
            <summary>
              <tt>Automaton</tt> transition. 
              <p>
                A transition, which belongs to a source state, consists of a Unicode character interval
                and a destination state.
              </p>
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Transition.#ctor(System.Char,Ploeh.AutoFixture.DataAnnotations.State)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.DataAnnotations.Transition"/> class.
            (Constructs a new singleton interval transition).
            </summary>
            <param name="c">The transition character.</param>
            <param name="to">The destination state.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Transition.#ctor(System.Char,System.Char,Ploeh.AutoFixture.DataAnnotations.State)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.DataAnnotations.Transition"/> class.
            (Both end points are included in the interval).
            </summary>
            <param name="min">The transition interval minimum.</param>
            <param name="max">The transition interval maximum.</param>
            <param name="to">The destination state.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Transition.op_Equality(Ploeh.AutoFixture.DataAnnotations.Transition,Ploeh.AutoFixture.DataAnnotations.Transition)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Transition.op_Inequality(Ploeh.AutoFixture.DataAnnotations.Transition,Ploeh.AutoFixture.DataAnnotations.Transition)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Transition.ToString">
            <summary>
             Returns a <see cref="T:System.String"/> describing this state.
            </summary>
            <returns>
             A <see cref="T:System.String"/> describing this state.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Transition.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref = "T:System.Object" /> is equal to the current 
              <see cref = "T:System.Object" />.
            </summary>
            <returns>
              true if the specified <see cref = "T:System.Object" /> is equal to the current 
              <see cref = "T:System.Object" />; otherwise, false.
            </returns>
            <param name = "obj">The <see cref = "T:System.Object" /> to compare with the current 
              <see cref = "T:System.Object" />. 
            </param>
            <exception cref = "T:System.NullReferenceException">The 
              <paramref name = "obj" /> parameter is null.
            </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Transition.GetHashCode">
            <summary>
              Serves as a hash function for a particular type.
            </summary>
            <returns>
              A hash code for the current <see cref = "T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Transition.Equals(Ploeh.AutoFixture.DataAnnotations.Transition)">
            <summary>
              Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
              true if the current object is equal to the <paramref name = "other" /> parameter; otherwise, false.
            </returns>
            <param name = "other">An object to compare with this object.
            </param>
        </member>
        <member name="P:Ploeh.AutoFixture.DataAnnotations.Transition.Min">
            <summary>
            Gets the minimum of this transition interval.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.DataAnnotations.Transition.Max">
            <summary>
            Gets the maximum of this transition interval.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.DataAnnotations.Transition.To">
            <summary>
            Gets the destination of this transition.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.TransitionComparer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.DataAnnotations.TransitionComparer"/> class.
            </summary>
            <param name="toFirst">if set to <c>true</c> [to first].</param>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.TransitionComparer.Compare(Ploeh.AutoFixture.DataAnnotations.Transition,Ploeh.AutoFixture.DataAnnotations.Transition)">
            <summary>
            Compares by (min, reverse max, to) or (to, min, reverse max).
            </summary>
            <param name="t1">The first Transition.</param>
            <param name="t2">The second Transition.</param>
            <returns></returns>
        </member>
        <member name="T:Ploeh.AutoFixture.DataAnnotations.Xeger">
            <summary>
            An object that will generate text from a regular expression. In a way, 
            it's the opposite of a regular expression matcher: an instance of this class
            will produce text that is guaranteed to match the regular expression passed in.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Xeger.#ctor(System.String,System.Random)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.DataAnnotations.Xeger"/> class.
            </summary>
            <param name="regex">The regex.</param>
            <param name="random">The random.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Xeger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.DataAnnotations.Xeger"/> class.
            </summary>
            <param name="regex">The regex.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Xeger.Generate">
            <summary>
            Generates a random String that is guaranteed to match the regular expression passed to the constructor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DataAnnotations.Xeger.GetRandomInt(System.Int32,System.Int32,System.Random)">
            <summary>
            Generates a random number within the given bounds.
            </summary>
            <param name="min">The minimum number (inclusive).</param>
            <param name="max">The maximum number (inclusive).</param>
            <param name="random">The object used as the randomizer.</param>
            <returns>A random number in the given range.</returns>
        </member>
        <member name="T:Ploeh.AutoFixture.DateTimeGenerator">
            <summary>
            Creates new <see cref="T:System.DateTime"/> instances.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DateTimeGenerator.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new <see cref="T:System.DateTime"/> instance.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            A new <see cref="T:System.DateTime"/> instance, if <paramref name="request"/> is a request for a
            <see cref="T:System.DateTime"/>; otherwise, a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.Generator`1">
            <summary>
            Generates a perpetual sequence of items.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <remarks>
            <para>
            This is a generator that generates a perpetual sequence of items of type
            <typeparamref name="T"/>, based on an encapsulated
            <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer"/>. This can be useful when zipping a against a finite
            sequence, since this sequence will go on for as long as required.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Generator`1.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Generator`1"/> class.
            </summary>
            <param name="composer">A composer which is used to generate items.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Generator`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Generator`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.ConstrainedStringRequest">
            <summary>
            Encapsulates a maximum length for a string.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.ConstrainedStringRequest.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.ConstrainedStringRequest"/> class.
            </summary>
            <param name="minimumLength">The minimum length.</param>
            <param name="maximumLength">The maximum length.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.ConstrainedStringRequest.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.ConstrainedStringRequest"/> class.
            </summary>
            <param name="maximumLength">The maximum.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.ConstrainedStringRequest.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
              </exception>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.ConstrainedStringRequest.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.ConstrainedStringRequest.Equals(Ploeh.AutoFixture.Kernel.ConstrainedStringRequest)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.ConstrainedStringRequest.MinimumLength">
            <summary>
            Gets the minimum length.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.ConstrainedStringRequest.MaximumLength">
            <summary>
            Gets the maximum length.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.RangedNumberRequest">
            <summary>
            Encapsulates a range for values of a given type.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.RangedNumberRequest.#ctor(System.Type,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.RangedNumberRequest"/> class.
            </summary>
            <param name="operandType">Type of the operand.</param>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.RangedNumberRequest.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
              </exception>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.RangedNumberRequest.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.RangedNumberRequest.Equals(Ploeh.AutoFixture.Kernel.RangedNumberRequest)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.RangedNumberRequest.OperandType">
            <summary>
            Gets the type of the operand.
            </summary>
            <value>
            The type of the operand.
            </value>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.RangedNumberRequest.Minimum">
            <summary>
            Gets the minimum value.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.RangedNumberRequest.Maximum">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.RegularExpressionRequest">
            <summary>
            Encapsulates a pattern for a regular expression.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.RegularExpressionRequest.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.RegularExpressionRequest"/> class.
            </summary>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.RegularExpressionRequest.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
              </exception>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.RegularExpressionRequest.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.RegularExpressionRequest.Equals(Ploeh.AutoFixture.Kernel.RegularExpressionRequest)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.RegularExpressionRequest.Pattern">
            <summary>
            Gets the regular expression pattern.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.RangedNumberGenerator">
            <summary>
            Creates a sequence of ranged numbers, starting at range minimum.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.RangedNumberGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.RangedNumberGenerator"/> class.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.RangedNumberGenerator.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new number based on a RangedNumberRequest.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The requested number if possible; otherwise a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.RegularExpressionGenerator">
            <summary>
            Creates a string that is guaranteed to match a RegularExpressionRequest.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.RegularExpressionGenerator.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a string that is guaranteed to match a RegularExpressionRequest.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The requested specimen if possible; otherwise a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.StrictlyMonotonicallyIncreasingDateTimeGenerator">
            <summary>
            Creates new <see cref="T:System.DateTime"/> specimens based on a incremental sequence of days.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.StrictlyMonotonicallyIncreasingDateTimeGenerator.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.StrictlyMonotonicallyIncreasingDateTimeGenerator"/> class.
            </summary>
            <param name="seed">The base <see cref="T:System.DateTime"/> value used to generate <see cref="T:System.DateTime"/> specimens.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.StrictlyMonotonicallyIncreasingDateTimeGenerator.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new <see cref="T:System.DateTime"/> instance.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            A new <see cref="T:System.DateTime"/> instance, if <paramref name="request"/> is a request for a
            <see cref="T:System.DateTime"/>; otherwise, a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.DefaultPrimitiveBuilders">
            <summary>
            Supplies <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> instances that can resolve requests for many common
            primitives, such as <see cref="T:System.String"/> and <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DefaultPrimitiveBuilders.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate
            through the collection.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DefaultPrimitiveBuilders.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate
            through the collection.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.DictionaryFiller">
            <summary>
            Contains methods for populating dictionaries with specimens.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DictionaryFiller.AddMany(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Adds many items to a dictionary.
            </summary>
            <param name="specimen">The dictionary to which items should be added.</param>
            <param name="context">The context which can be used to resolve other specimens.</param>
            <remarks>
            <para>
            This method mainly exists to support AutoFixture's infrastructure code (particularly
            <see cref="T:Ploeh.AutoFixture.MultipleCustomization"/> and is not intended for use in user code.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            <paramref name="specimen"/> is not an instance of <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </exception>
        </member>
        <member name="T:Ploeh.AutoFixture.DisposableTrackingCustomization">
            <summary>
            Encapsulates a customization that adds tracking of disposable specimens to an
            <see cref="T:Ploeh.AutoFixture.IFixture"/>.
            </summary>
            <remarks>
            <para>
            Customize an <see cref="T:Ploeh.AutoFixture.IFixture"/> to enable tracking of disposable specimens. Invoke
            <see cref="M:Ploeh.AutoFixture.DisposableTrackingCustomization.Dispose"/> on the instance to dispose of all tracked instances.
            </para>
            </remarks>
            <seealso cref="T:Ploeh.AutoFixture.Kernel.DisposableTrackingBehavior"/>
        </member>
        <member name="M:Ploeh.AutoFixture.DisposableTrackingCustomization.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.DisposableTrackingCustomization"/> class.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DisposableTrackingCustomization.Customize(Ploeh.AutoFixture.IFixture)">
            <summary>
            Customizes the specified fixture by applying <see cref="P:Ploeh.AutoFixture.DisposableTrackingCustomization.Behavior"/>.
            </summary>
            <param name="fixture">The fixture to customize.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.DisposableTrackingCustomization.Dispose">
            <summary>
            Disposes <see cref="P:Ploeh.AutoFixture.DisposableTrackingCustomization.Behavior"/>.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DisposableTrackingCustomization.Dispose(System.Boolean)">
            <summary>
            Disposes <see cref="P:Ploeh.AutoFixture.DisposableTrackingCustomization.Behavior"/>.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="P:Ploeh.AutoFixture.DisposableTrackingCustomization.Behavior">
            <summary>
            Gets the behavior that this customization adds to <see cref="T:Ploeh.AutoFixture.IFixture"/> instances.
            </summary>
            <seealso cref="T:Ploeh.AutoFixture.Kernel.DisposableTrackingBehavior"/>
        </member>
        <member name="T:Ploeh.AutoFixture.Dsl.Composer`1">
            <summary>
            Enables composition customization of a single type of specimen.
            </summary>
            <typeparam name="T">The type of specimen.</typeparam>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.TypedBuilderComposer">
            <summary>
            Composes a <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> that targets a particular <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.TypedBuilderComposer.#ctor(System.Type,Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.TypedBuilderComposer"/> class.
            </summary>
            <param name="targetType">
            The <see cref="T:System.Type"/> targeted by the <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> created by
            <see cref="M:Ploeh.AutoFixture.Kernel.TypedBuilderComposer.Compose"/>.
            </param>
            <param name="factory">
            The factory that creates instances of <see cref="P:Ploeh.AutoFixture.Kernel.TypedBuilderComposer.TargetType"/>.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.TypedBuilderComposer.Compose">
            <summary>
            Composes a new <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> instance.
            </summary>
            <returns>
            A new <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> instance with appropriate filters that targets
            <see cref="P:Ploeh.AutoFixture.Kernel.TypedBuilderComposer.TargetType"/>.
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.TypedBuilderComposer.Factory">
            <summary>
            Gets the factory that creates instance of <see cref="P:Ploeh.AutoFixture.Kernel.TypedBuilderComposer.TargetType"/>.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.TypedBuilderComposer.TargetType">
            <summary>
            Gets the targeted <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.TypedBuilderComposer.InputFilter">
            <summary>
            Gets the input filter.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.TypedBuilderComposer.Transformations">
            <summary>
            Gets the transformations that will be applied to <see cref="P:Ploeh.AutoFixture.Kernel.TypedBuilderComposer.Factory"/> during
            <see cref="M:Ploeh.AutoFixture.Kernel.TypedBuilderComposer.Compose"/>.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.TypedBuilderComposer.DecorateWithOutputGuardTransformation">
            <summary>
            A tranformation that decorates an <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> with an appropriate
            <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimenOutputGuard"/>.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilderTransformation">
            <summary>
            Transforms one <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> instance into another.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.ISpecimenBuilderTransformation.Transform(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Transforms the supplied builder into another.
            </summary>
            <param name="builder">The builder to transform.</param>
            <returns>
            A new <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> created from <paramref name="builder"/>.
            </returns>
            <remarks>
            <para>
            Note to implementers: In most scenarios, the transformation is expected to maintain
            behavior of <paramref name="builder"/>; usually by applying a Decorator.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.TypedBuilderComposer.DecorateWithOutputGuardTransformation.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.TypedBuilderComposer.DecorateWithOutputGuardTransformation"/> class.
            </summary>
            <param name="targetType">The target <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.TypedBuilderComposer.DecorateWithOutputGuardTransformation.Transform(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Transforms the supplied builder into another.
            </summary>
            <param name="builder">The builder to transform.</param>
            <returns>
            A new <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> created from <paramref name="builder"/>.
            </returns>
            <remarks>
            <para>
            Although a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimenOutputGuard"/> throws if the decorated
            <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> returns a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/>, this
            transformation permits NoSpecimen return values if the request is a
            <see cref="T:Ploeh.AutoFixture.Kernel.SeededRequest"/> for the <see cref="P:Ploeh.AutoFixture.Kernel.TypedBuilderComposer.TargetType"/>. This enables the
            engine to retry the request with the unwrapped <see cref="T:System.Type"/> request.
            </para>
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.TypedBuilderComposer.CombineWithSeedRelayTransformation">
            <summary>
            A transformation that combines an <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> with a
            <see cref="T:Ploeh.AutoFixture.Kernel.SeedIgnoringRelay"/>.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.TypedBuilderComposer.CombineWithSeedRelayTransformation.Transform(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Transforms the supplied builder into another.
            </summary>
            <param name="builder">The builder to transform.</param>
            <returns>
            A new <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> created from <paramref name="builder"/>.
            </returns>
            <remarks>
            <para>
            This method combines <paramref name="builder"/> with a
            <see cref="T:Ploeh.AutoFixture.Kernel.SeedIgnoringRelay"/>. This ensures that if the original builder cannot
            deal with a <see cref="T:Ploeh.AutoFixture.Kernel.SeededRequest"/> the request is immediately retried with the
            unwrapped request.
            </para>
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.TypedBuilderComposer.DecorateWithInputFilterTransformation">
            <summary>
            A transformation that decorates an <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> with a filter that
            filters according to a target type.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.TypedBuilderComposer.DecorateWithInputFilterTransformation.#ctor(Ploeh.AutoFixture.Kernel.IRequestSpecification)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.TypedBuilderComposer.DecorateWithInputFilterTransformation"/> class.
            </summary>
            <param name="inputFilter">The input filter.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.TypedBuilderComposer.DecorateWithInputFilterTransformation.Transform(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Transforms the supplied builder into another.
            </summary>
            <param name="builder">The builder to transform.</param>
            <returns>
            A new <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> created from <paramref name="builder"/>.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.Composer`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Dsl.Composer`1"/> class.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.Composer`1.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder,System.Collections.Generic.IEnumerable{Ploeh.AutoFixture.Kernel.ISpecifiedSpecimenCommand{`0}},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Dsl.Composer`1"/> class.
            </summary>
            <param name="factory">
            A factory which will be used to create specimen instances.
            </param>
            <param name="postprocessors">
            Post-processors that will be executed on each created specimen.
            </param>
            <param name="enableAutoProperties">
            Enables auto properties if set to <see langword="true"/>.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.Composer`1.WithAutoProperties(System.Boolean)">
            <summary>
            Controls whether auto-properties will be enabled or not.
            </summary>
            <param name="enable">Set to <see langword="true"/> to enable auto-properties.</param>
            <returns>
            A new instance of <see cref="T:Ploeh.AutoFixture.Dsl.Composer`1"/> with <see cref="P:Ploeh.AutoFixture.Dsl.Composer`1.EnableAutoProperties"/> set
            to the value of <paramref name="enable"/>.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.Composer`1.WithFactory(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Controls which factory will be used when specimens are created.
            </summary>
            <param name="factory">The factory.</param>
            <returns>
            A new instance of <see cref="T:Ploeh.AutoFixture.Dsl.Composer`1"/> with
            <see cref="P:Ploeh.AutoFixture.Kernel.TypedBuilderComposer.Factory"/> set to the value of
            <paramref name="factory"/>.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.Composer`1.WithPostprocessor(Ploeh.AutoFixture.Kernel.ISpecifiedSpecimenCommand{`0})">
            <summary>
            Adds a post-processor to the customization.
            </summary>
            <param name="postprocessor">The postprocessor to add.</param>
            <returns>
            A new instance of <see cref="T:Ploeh.AutoFixture.Dsl.Composer`1"/> with <paramref name="postprocessor"/> added
            to <see cref="P:Ploeh.AutoFixture.Dsl.Composer`1.Postprocessors"/>.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.Composer`1.FromSeed(System.Func{`0,`0})">
            <summary>
            Specifies a function that defines how to create a specimen from a seed.
            </summary>
            <param name="factory">The factory used to create specimens from seeds.</param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.Composer`1.FromFactory(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Specifies an <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> that can create specimens of the
            appropriate type. Mostly for advanced scenarios.
            </summary>
            <param name="factory">
            An <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> that can create specimens of the appropriate type.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.Composer`1.FromFactory(System.Func{`0})">
            <summary>
            Specifies that an anonymous object should be created in a particular way; often by
            using a constructor.
            </summary>
            <param name="factory">
            A function that will be used to create the object. This will often be a constructor.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.Composer`1.FromFactory``1(System.Func{``0,`0})">
            <summary>
            Specifies that a specimen should be created in a particular way, using a single input
            parameter for the factory.
            </summary>
            <typeparam name="TInput">
            The type of input parameter to use when invoking <paramref name="factory"/>
            .</typeparam>
            <param name="factory">
            A function that will be used to create the object. This will often be a constructor
            that takes a single constructor argument of type <typeparamref name="TInput"/>.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.Composer`1.FromFactory``2(System.Func{``0,``1,`0})">
            <summary>
            Specifies that a specimen should be created in a particular way, using two input
            parameters for the construction.
            </summary>
            <typeparam name="TInput1">
            The type of the first input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <typeparam name="TInput2">
            The type of the second input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <param name="factory">
            A function that will be used to create the object. This will often be a constructor
            that takes two constructor arguments of type <typeparamref name="TInput1"/> and
            <typeparamref name="TInput2"/>.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.Composer`1.FromFactory``3(System.Func{``0,``1,``2,`0})">
            <summary>
            Specifies that a specimen should be created in a particular way, using three input
            parameters for the construction.
            </summary>
            <typeparam name="TInput1">
            The type of the first input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <typeparam name="TInput2">
            The type of the second input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <typeparam name="TInput3">
            The type of the third input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <param name="factory">
            A function that will be used to create the object. This will often be a constructor
            that takes three constructor arguments of type <typeparamref name="TInput1"/>,
            <typeparamref name="TInput2"/> and <typeparamref name="TInput3"/>.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.Composer`1.FromFactory``4(System.Func{``0,``1,``2,``3,`0})">
            <summary>
            Specifies that a specimen should be created in a particular way, using four input
            parameters for the construction.
            </summary>
            <typeparam name="TInput1">
            The type of the first input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <typeparam name="TInput2">
            The type of the second input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <typeparam name="TInput3">
            The type of the third input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <typeparam name="TInput4">
            The type of the fourth input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <param name="factory">
            A function that will be used to create the object. This will often be a constructor
            that takes three constructor arguments of type <typeparamref name="TInput1"/>,
            <typeparamref name="TInput2"/>, <typeparamref name="TInput3"/> and
            <typeparamref name="TInput4"/>.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.Composer`1.Do(System.Action{`0})">
            <summary>
            Performs the specified action on a specimen.
            </summary>
            <param name="action">The action to perform.</param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.Composer`1.OmitAutoProperties">
            <summary>
            Disables auto-properties for a type of specimen.
            </summary>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.Composer`1.With``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Registers that a writable property or field should be assigned an anonymous value as
            part of specimen post-processing.
            </summary>
            <typeparam name="TProperty">The type of the property of field.</typeparam>
            <param name="propertyPicker">
            An expression that identifies the property or field that will should have a value
            assigned.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.Composer`1.With``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Registers that a writable property or field should be assigned a specific value as
            part of specimen post-processing.
            </summary>
            <typeparam name="TProperty">The type of the property of field.</typeparam>
            <param name="propertyPicker">
            An expression that identifies the property or field that will have
            <paramref name="value"/> assigned.
            </param>
            <param name="value">
            The value to assign to the property or field identified by
            <paramref name="propertyPicker"/>.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.Composer`1.WithAutoProperties">
            <summary>
            Enables auto-properties for a type of specimen.
            </summary>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.Composer`1.Without``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Withouts the specified property picker.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyPicker">The property picker.</param>
            <returns></returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Dsl.Composer`1.EnableAutoProperties">
            <summary>
            Gets a value indicating whether writable properties and fields will be assigned with
            anonymous values.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Dsl.Composer`1.Postprocessors">
            <summary>
            Gets the postprocessors that will be executed on each created specimen.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Dsl.Composer`1.Transformations">
            <summary>
            Gets the transformations that will be applied to
            <see cref="P:Ploeh.AutoFixture.Kernel.TypedBuilderComposer.Factory"/> during
            <see cref="M:Ploeh.AutoFixture.Kernel.TypedBuilderComposer.Compose"/>.
            </summary>
            <remarks>
            <para>
            These transformations compose the appropriate post-processors according to the rules
            encapsulated by the <see cref="T:Ploeh.AutoFixture.Dsl.Composer`1"/> instance.
            </para>
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Dsl.Composer`1.DecorateWithPostprocessorsTransformation">
            <summary>
            A transformation that decorates an <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> with the appropriate
            postprocessor.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.Composer`1.DecorateWithPostprocessorsTransformation.#ctor(System.Collections.Generic.IEnumerable{Ploeh.AutoFixture.Kernel.ISpecifiedSpecimenCommand{`0}})">
            <summary>
            Initializes a new instance of the
            <see cref="T:Ploeh.AutoFixture.Dsl.Composer`1.DecorateWithPostprocessorsTransformation"/> class.
            </summary>
            <param name="postprocessors">The postprocessors.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.Composer`1.DecorateWithPostprocessorsTransformation.Transform(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Transforms the supplied builder into another.
            </summary>
            <param name="builder">The builder to transform.</param>
            <returns>
            A new <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> created from <paramref name="builder"/>.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.Dsl.Composer`1.DecorateWithAppropriateAutoPropertyBuilders">
            <summary>
            A transformation that decorates an <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> with a post-processor
            that applies the appropriate auto-properties.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.Composer`1.DecorateWithAppropriateAutoPropertyBuilders.#ctor(System.Collections.Generic.IEnumerable{Ploeh.AutoFixture.Kernel.ISpecifiedSpecimenCommand{`0}},Ploeh.AutoFixture.Kernel.IRequestSpecification,System.Boolean)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Ploeh.AutoFixture.Dsl.Composer`1.DecorateWithAppropriateAutoPropertyBuilders"/> class.
            </summary>
            <param name="postprocessors">The postprocessors.</param>
            <param name="inputFilter">The input filter.</param>
            <param name="enableAutoProperties">
            Indicates whether auto-properties are enabled.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.Composer`1.DecorateWithAppropriateAutoPropertyBuilders.Transform(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Transforms the supplied builder into another.
            </summary>
            <param name="builder">The builder to transform.</param>
            <returns>
            A new <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> created from <paramref name="builder"/>.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.Dsl.CompositeComposer`1">
            <summary>
            Aggregates an arbitrary number of <see cref="T:Ploeh.AutoFixture.Dsl.ICustomizationComposer`1"/> instances.
            </summary>
            <typeparam name="T">The type of specimen to customize.</typeparam>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.CompositeComposer`1.#ctor(System.Collections.Generic.IEnumerable{Ploeh.AutoFixture.Dsl.ICustomizationComposer{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Dsl.CompositeComposer`1"/> class
            with a sequence of <see cref="T:Ploeh.AutoFixture.Dsl.ICustomizationComposer`1"/> instances.
            </summary>
            <param name="composers">The composers to aggregate.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.CompositeComposer`1.#ctor(Ploeh.AutoFixture.Dsl.ICustomizationComposer{`0}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Dsl.CompositeComposer`1"/> class
            with an array of <see cref="T:Ploeh.AutoFixture.Dsl.ICustomizationComposer`1"/> instances.
            </summary>
            <param name="composers">The composers to aggregate.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.CompositeComposer`1.FromSeed(System.Func{`0,`0})">
            <summary>
            Specifies a function that defines how to create a specimen from a seed.
            </summary>
            <param name="factory">The factory used to create specimens from seeds.</param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.CompositeComposer`1.FromFactory(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Specifies an <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> that can create specimens of the
            appropriate type. Mostly for advanced scenarios.
            </summary>
            <param name="factory">
            An <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> that can create specimens of the appropriate type.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.CompositeComposer`1.FromFactory(System.Func{`0})">
            <summary>
            Specifies that an anonymous object should be created in a particular way; often by
            using a constructor.
            </summary>
            <param name="factory">
            A function that will be used to create the object. This will often be a constructor.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.CompositeComposer`1.FromFactory``1(System.Func{``0,`0})">
            <summary>
            Specifies that a specimen should be created in a particular way, using a single input
            parameter for the factory.
            </summary>
            <typeparam name="TInput">
            The type of input parameter to use when invoking <paramref name="factory"/>
            .</typeparam>
            <param name="factory">
            A function that will be used to create the object. This will often be a constructor
            that takes a single constructor argument of type <typeparamref name="TInput"/>.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.CompositeComposer`1.FromFactory``2(System.Func{``0,``1,`0})">
            <summary>
            Specifies that a specimen should be created in a particular way, using two input
            parameters for the construction.
            </summary>
            <typeparam name="TInput1">
            The type of the first input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <typeparam name="TInput2">
            The type of the second input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <param name="factory">
            A function that will be used to create the object. This will often be a constructor
            that takes two constructor arguments of type <typeparamref name="TInput1"/> and
            <typeparamref name="TInput2"/>.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.CompositeComposer`1.FromFactory``3(System.Func{``0,``1,``2,`0})">
            <summary>
            Specifies that a specimen should be created in a particular way, using three input
            parameters for the construction.
            </summary>
            <typeparam name="TInput1">
            The type of the first input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <typeparam name="TInput2">
            The type of the second input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <typeparam name="TInput3">
            The type of the third input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <param name="factory">
            A function that will be used to create the object. This will often be a constructor
            that takes three constructor arguments of type <typeparamref name="TInput1"/>,
            <typeparamref name="TInput2"/> and <typeparamref name="TInput3"/>.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.CompositeComposer`1.FromFactory``4(System.Func{``0,``1,``2,``3,`0})">
            <summary>
            Specifies that a specimen should be created in a particular way, using four input
            parameters for the construction.
            </summary>
            <typeparam name="TInput1">
            The type of the first input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <typeparam name="TInput2">
            The type of the second input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <typeparam name="TInput3">
            The type of the third input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <typeparam name="TInput4">
            The type of the fourth input parameter to use when invoking <paramref name="factory"/>.
            </typeparam>
            <param name="factory">
            A function that will be used to create the object. This will often be a constructor
            that takes three constructor arguments of type <typeparamref name="TInput1"/>,
            <typeparamref name="TInput2"/>, <typeparamref name="TInput3"/> and
            <typeparamref name="TInput4"/>.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.CompositeComposer`1.Do(System.Action{`0})">
            <summary>
            Performs the specified action on a specimen.
            </summary>
            <param name="action">The action to perform.</param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.CompositeComposer`1.OmitAutoProperties">
            <summary>
            Disables auto-properties for a type of specimen.
            </summary>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.CompositeComposer`1.With``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Registers that a writable property or field should be assigned an anonymous value as
            part of specimen post-processing.
            </summary>
            <typeparam name="TProperty">The type of the property of field.</typeparam>
            <param name="propertyPicker">
            An expression that identifies the property or field that will should have a value
            assigned.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.CompositeComposer`1.With``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Registers that a writable property or field should be assigned a specific value as
            part of specimen post-processing.
            </summary>
            <typeparam name="TProperty">The type of the property of field.</typeparam>
            <param name="propertyPicker">
            An expression that identifies the property or field that will have
            <paramref name="value"/> assigned.
            </param>
            <param name="value">
            The value to assign to the property or field identified by
            <paramref name="propertyPicker"/>.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.CompositeComposer`1.WithAutoProperties">
            <summary>
            Enables auto-properties for a type of specimen.
            </summary>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.CompositeComposer`1.Without``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Registers that a writable property should not be assigned any automatic value as
            part of specimen post-processing.
            </summary>
            <typeparam name="TProperty">The type of the property or field to ignore.</typeparam>
            <param name="propertyPicker">
            An expression that identifies the property or field to be ignored.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.CompositeComposer`1.Compose">
            <summary>
            Composes a new <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> instance.
            </summary>
            <returns>
            A new <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> instance.
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Dsl.CompositeComposer`1.Composers">
            <summary>
            Gets the aggregated composers.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Dsl.CompositePostprocessComposer`1">
            <summary>
            Aggregates an arbitrary number of <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> instances.
            </summary>
            <typeparam name="T">The type of specimen to customize.</typeparam>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.CompositePostprocessComposer`1.#ctor(System.Collections.Generic.IEnumerable{Ploeh.AutoFixture.Dsl.IPostprocessComposer{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Dsl.CompositePostprocessComposer`1"/>
            class with a sequence of <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> instances.
            </summary>
            <param name="composers">The composers to aggregate.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.CompositePostprocessComposer`1.#ctor(Ploeh.AutoFixture.Dsl.IPostprocessComposer{`0}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Dsl.CompositePostprocessComposer`1"/>
            class with an array of <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> instances. 
            </summary>
            <param name="composers">The composers to aggregate.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.CompositePostprocessComposer`1.Do(System.Action{`0})">
            <summary>
            Performs the specified action on a specimen.
            </summary>
            <param name="action">The action to perform.</param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.CompositePostprocessComposer`1.OmitAutoProperties">
            <summary>
            Disables auto-properties for a type of specimen.
            </summary>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.CompositePostprocessComposer`1.With``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Registers that a writable property or field should be assigned an anonymous value as
            part of specimen post-processing.
            </summary>
            <typeparam name="TProperty">The type of the property of field.</typeparam>
            <param name="propertyPicker">
            An expression that identifies the property or field that will should have a value
            assigned.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.CompositePostprocessComposer`1.With``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Registers that a writable property or field should be assigned a specific value as
            part of specimen post-processing.
            </summary>
            <typeparam name="TProperty">The type of the property of field.</typeparam>
            <param name="propertyPicker">
            An expression that identifies the property or field that will have
            <paramref name="value"/> assigned.
            </param>
            <param name="value">
            The value to assign to the property or field identified by
            <paramref name="propertyPicker"/>.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.CompositePostprocessComposer`1.WithAutoProperties">
            <summary>
            Enables auto-properties for a type of specimen.
            </summary>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.CompositePostprocessComposer`1.Without``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Registers that a writable property should not be assigned any automatic value as
            part of specimen post-processing.
            </summary>
            <typeparam name="TProperty">The type of the property or field to ignore.</typeparam>
            <param name="propertyPicker">
            An expression that identifies the property or field to be ignored.
            </param>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Dsl.IPostprocessComposer`1"/> which can be used to further customize the
            post-processing of created specimens.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.CompositePostprocessComposer`1.Compose">
            <summary>
            Composes a new <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> instance.
            </summary>
            <returns>
            A new <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> instance.
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Dsl.CompositePostprocessComposer`1.Composers">
            <summary>
            Gets the aggregated composers.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.DefaultEngineParts">
            <summary>
            Supplies <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> instances that can be used to implement the default
            engine of AutoFixture.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.DefaultRelays">
            <summary>
            Supplies <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> instances that works as AutoFixture's
            'transmission'. Without those builders, very little is likely to work.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.IMultiple">
            <summary>
            Represents an Equivalence Class for the concept of <i>Many</i>.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.IMultiple.Count">
            <summary>
            Gets or sets the count that specifies how many <i>Many</i> is.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DefaultRelays.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.DefaultRelays"/> class.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DefaultRelays.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate
            through the collection.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DefaultRelays.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate
            through the collection.
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.DefaultRelays.Count">
            <summary>
            Gets or sets the count that specifies how many <i>Many</i> is.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DefaultEngineParts.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.DefaultEngineParts"/> class with
            an instance of <see cref="T:Ploeh.AutoFixture.DefaultPrimitiveBuilders"/>.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DefaultEngineParts.#ctor(System.Collections.Generic.IEnumerable{Ploeh.AutoFixture.Kernel.ISpecimenBuilder})">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.DefaultEngineParts"/> class with the
            supplied sequence of <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/>.
            </summary>
            <param name="primitiveBuilders">
            The builders to use instead of <see cref="T:Ploeh.AutoFixture.DefaultPrimitiveBuilders"/>.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.DefaultEngineParts.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.DefaultEngineParts"/> class with the
            supplied array of <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/>.
            </summary>
            <param name="primitiveBuilders">
            The builders to use instead of <see cref="T:Ploeh.AutoFixture.DefaultPrimitiveBuilders"/>.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.DefaultEngineParts.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate
            through the collection.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.EnumGenerator">
            <summary>
            Generates enum values in a round-robin fashion.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.EnumGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.EnumGenerator"/> class.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.EnumGenerator.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new enum value based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">
            A context that can be used to create other specimens. Not used.
            </param>
            <returns>
            An enum value if appropriate; otherwise a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
            <remarks>
            <para>
            If <paramref name="request"/> is a <see cref="T:System.Type"/> that represents an enum, an
            instance of that enum is returned. Differing values are returned, starting with the
            first value. When all values of the enum type have been served, the sequence starts
            over again.
            </para>
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.FixtureFreezer">
            <summary>
            Contains extension methods for freezing specimens in <see cref="T:Ploeh.AutoFixture.IFixture"/> instances.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.FixtureFreezer.Freeze``1(Ploeh.AutoFixture.IFixture)">
            <summary>
            Freezes the type to a single value.
            </summary>
            <typeparam name="T">The type to freeze.</typeparam>
            <param name="fixture">The fixture.</param>
            <returns>
            The value that will subsequently always be created for <typeparamref name="T"/>.
            </returns>
            <remarks>
            <para>
            The <see cref="M:Ploeh.AutoFixture.FixtureFreezer.Freeze``1(Ploeh.AutoFixture.IFixture)"/> method freezes the type to always return the same
            instance whenever an instance of the type is requested either directly, or indirectly as a
            nested value of other types.
            </para>
            </remarks>
            <seealso cref="M:Ploeh.AutoFixture.FixtureFreezer.Freeze``1(Ploeh.AutoFixture.IFixture,``0)"/>
            <seealso cref="M:Ploeh.AutoFixture.FixtureFreezer.Freeze``1(Ploeh.AutoFixture.IFixture,System.Func{Ploeh.AutoFixture.Dsl.ICustomizationComposer{``0},Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer})"/>
        </member>
        <member name="M:Ploeh.AutoFixture.FixtureFreezer.Freeze``1(Ploeh.AutoFixture.IFixture,``0)">
            <summary>
            Freezes the type to a single value.
            </summary>
            <typeparam name="T">The type to freeze.</typeparam>
            <param name="fixture">The fixture.</param>
            <param name="seed">
            Any data that adds additional information when creating the anonymous object.
            </param>
            <returns>
            The value that will subsequently always be created for <typeparamref name="T"/>.
            </returns>
            <remarks>
            <para>
            The <see cref="M:Ploeh.AutoFixture.FixtureFreezer.Freeze``1(Ploeh.AutoFixture.IFixture,``0)"/> method freezes the type to always return the
            same instance whenever an instance of the type is requested either directly, or
            indirectly as a nested value of other types.
            </para>
            </remarks>
            <seealso cref="M:Ploeh.AutoFixture.FixtureFreezer.Freeze``1(Ploeh.AutoFixture.IFixture)"/>
            <seealso cref="M:Ploeh.AutoFixture.FixtureFreezer.Freeze``1(Ploeh.AutoFixture.IFixture,System.Func{Ploeh.AutoFixture.Dsl.ICustomizationComposer{``0},Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer})"/>
        </member>
        <member name="M:Ploeh.AutoFixture.FixtureFreezer.Freeze``1(Ploeh.AutoFixture.IFixture,System.Func{Ploeh.AutoFixture.Dsl.ICustomizationComposer{``0},Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer})">
            <summary>
            Freezes the type to a single value.
            </summary>
            <typeparam name="T">The type to freeze.</typeparam>
            <param name="fixture">The fixture.</param>
            <param name="composerTransformation">
            A function that customizes a given <see cref="T:Ploeh.AutoFixture.Dsl.ICustomizationComposer`1"/> and returns
            the modified composer.
            </param>
            <returns>
            The value that will subsequently always be created for <typeparamref name="T"/>.
            </returns>
            <remarks>
            <para>
            The <see cref="M:Ploeh.AutoFixture.FixtureFreezer.Freeze``1(Ploeh.AutoFixture.IFixture,``0)"/> method freezes the type to always return the
            same instance whenever an instance of the type is requested either directly, or
            indirectly as a nested value of other types. The frozen instance is created by an
            <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer"/> that is the result of applying the
            <paramref name="composerTransformation"/>.
            </para>
            </remarks>
            <seealso cref="M:Ploeh.AutoFixture.FixtureFreezer.Freeze``1(Ploeh.AutoFixture.IFixture)"/>
            <seealso cref="M:Ploeh.AutoFixture.FixtureFreezer.Freeze``1(Ploeh.AutoFixture.IFixture,``0)"/>
        </member>
        <member name="T:Ploeh.AutoFixture.FixtureRegistrar">
            <summary>
            Contains extension methods for registering specimens in <see cref="T:Ploeh.AutoFixture.IFixture"/> instances.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.FixtureRegistrar.Inject``1(Ploeh.AutoFixture.IFixture,``0)">
            <summary>
            Injects a specific instance for a specific type.
            </summary>
            <typeparam name="T">
            The type for which <paramref name="item"/> should be injected.
            </typeparam>
            <param name="fixture">The fixture.</param>
            <param name="item">The item to inject.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.FixtureRegistrar.Register``1(Ploeh.AutoFixture.IFixture,System.Func{``0})">
            <summary>
            Registers a creation function for a specifc type.
            </summary>
            <typeparam name="T">
            The type for which <paramref name="creator"/> should be registered.
            </typeparam>
            <param name="fixture">The fixture.</param>
            <param name="creator">
            A function that will be used to create objects of type <typeparamref name="T"/> every
            time the <see cref="T:Ploeh.AutoFixture.Fixture"/> is asked to create an object of that type.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.FixtureRegistrar.Register``2(Ploeh.AutoFixture.IFixture,System.Func{``0,``1})">
            <summary>
            Registers a creation function for a specific type, when that creation function requires
            a single input parameter.
            </summary>
            <typeparam name="TInput">
            The type of the input parameter used by <paramref name="creator"/>.
            </typeparam>
            <typeparam name="T">
            The type for which <paramref name="creator"/> should be registered.
            </typeparam>
            <param name="fixture">The fixture.</param>
            <param name="creator">
            A function that will be used to create objects of type <typeparamref name="T"/> every
            time the <see cref="T:Ploeh.AutoFixture.Fixture"/> is asked to create an object of that type.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.FixtureRegistrar.Register``3(Ploeh.AutoFixture.IFixture,System.Func{``0,``1,``2})">
            <summary>
            Registers a creation function for a specific type, when that creation function requires
            two input parameters.
            </summary>
            <typeparam name="TInput1">
            The type of the first input parameter used by <paramref name="creator"/>.
            </typeparam>
            <typeparam name="TInput2">
            The type of the second input parameter used by <paramref name="creator"/>.
            </typeparam>
            <typeparam name="T">
            The type for which <paramref name="creator"/> should be registered.
            </typeparam>
            <param name="fixture">The fixture.</param>
            <param name="creator">
            A function that will be used to create objects of type <typeparamref name="T"/> every
            time the <see cref="T:Ploeh.AutoFixture.Fixture"/> is asked to create an object of that type.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.FixtureRegistrar.Register``4(Ploeh.AutoFixture.IFixture,System.Func{``0,``1,``2,``3})">
            <summary>
            Registers a creation function for a specific type, when that creation function requires
            three input parameters.
            </summary>
            <typeparam name="TInput1">
            The type of the first input parameter used by <paramref name="creator"/>.
            </typeparam>
            <typeparam name="TInput2">
            The type of the second input parameter used by <paramref name="creator"/>.
            </typeparam>
            <typeparam name="TInput3">
            The type of the third input parameter used by <paramref name="creator"/>.
            </typeparam>
            <typeparam name="T">
            The type for which <paramref name="creator"/> should be registered.
            </typeparam>
            <param name="fixture">The fixture.</param>
            <param name="creator">
            A function that will be used to create objects of type <typeparamref name="T"/> every
            time the <see cref="T:Ploeh.AutoFixture.Fixture"/> is asked to create an object of that type.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.FixtureRegistrar.Register``5(Ploeh.AutoFixture.IFixture,System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Registers a creation function for a specific type, when that creation function requires
            four input parameters.
            </summary>
            <typeparam name="TInput1">
            The type of the first input parameter used by <paramref name="creator"/>.
            </typeparam>
            <typeparam name="TInput2">
            The type of the second input parameter used by <paramref name="creator"/>.
            </typeparam>
            <typeparam name="TInput3">
            The type of the third input parameter used by <paramref name="creator"/>.
            </typeparam>
            <typeparam name="TInput4">
            The type of the fourth input parameter used by <paramref name="creator"/>.
            </typeparam>
            <typeparam name="T">
            The type for which <paramref name="creator"/> should be registered.
            </typeparam>
            <param name="fixture">The fixture.</param>
            <param name="creator">
            A function that will be used to create objects of type <typeparamref name="T"/> every
            time the <see cref="T:Ploeh.AutoFixture.Fixture"/> is asked to create an object of that type.
            </param>
        </member>
        <member name="T:Ploeh.AutoFixture.FreezingCustomization">
            <summary>
            A customization that will freeze a specimen of a given <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.FreezingCustomization.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.FreezingCustomization"/> class.
            </summary>
            <param name="targetType">The <see cref="T:System.Type"/> to freeze.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="targetType"/> is null.
            </exception>
        </member>
        <member name="M:Ploeh.AutoFixture.FreezingCustomization.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.FreezingCustomization"/> class.
            </summary>
            <param name="targetType">The <see cref="T:System.Type"/> to freeze.</param>
            <param name="registeredType">
            The <see cref="T:System.Type"/> to map the frozen <paramref name="targetType"/> value to.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="targetType"/> or <paramref name="registeredType"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="registeredType"/> is not assignable from <paramref name="targetType"/>.
            </exception>
        </member>
        <member name="M:Ploeh.AutoFixture.FreezingCustomization.Customize(Ploeh.AutoFixture.IFixture)">
            <summary>
            Customizes the fixture by freezing the value of <see cref="P:Ploeh.AutoFixture.FreezingCustomization.TargetType"/>.
            </summary>
            <param name="fixture">The fixture to customize.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fixture"/> is null.
            </exception>
        </member>
        <member name="P:Ploeh.AutoFixture.FreezingCustomization.TargetType">
            <summary>
            Gets the <see cref="T:System.Type"/> to freeze.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.FreezingCustomization.RegisteredType">
            <summary>
            Gets the <see cref="T:System.Type"/> to which the frozen <see cref="P:Ploeh.AutoFixture.FreezingCustomization.TargetType"/> value
            should be mapped to. Defaults to the same <see cref="T:System.Type"/> as <see cref="P:Ploeh.AutoFixture.FreezingCustomization.TargetType"/>.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.ConstructorCustomization">
            <summary>
            A customization that uses a particular constructor selection mechanism to pick and invoke
            a constructor to create specimens of the targeted type.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.ConstructorCustomization.#ctor(System.Type,Ploeh.AutoFixture.Kernel.IMethodQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.ConstructorCustomization"/> class.
            </summary>
            <param name="targetType">
            The <see cref="T:System.Type"/> for which <paramref name="query"/> should be used to select the
            most appropriate constructor.
            </param>
            <param name="query">
            The query that selects a constructor for <paramref name="targetType"/>.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.ConstructorCustomization.Customize(Ploeh.AutoFixture.IFixture)">
            <summary>
            Customizes the specified fixture by modifying <see cref="P:Ploeh.AutoFixture.ConstructorCustomization.TargetType"/> to use
            <see cref="P:Ploeh.AutoFixture.ConstructorCustomization.Query"/> as the strategy for creating new specimens.
            </summary>
            <param name="fixture">The fixture to customize.</param>
        </member>
        <member name="P:Ploeh.AutoFixture.ConstructorCustomization.TargetType">
            <summary>
            Gets the <see cref="T:System.Type"/> for which <see cref="P:Ploeh.AutoFixture.ConstructorCustomization.Query"/> should be used to select the
            most appropriate constructor.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.ConstructorCustomization.Query">
            <summary>
            Gets the query that selects a constructor for <see cref="P:Ploeh.AutoFixture.ConstructorCustomization.TargetType"/>.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.IFixture">
            <summary>
            Provides anonymous object creation services.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.IFixture.Build``1">
            <summary>
            Customizes the creation algorithm for a single object, effectively turning off all
            Customizations on the <see cref="T:Ploeh.AutoFixture.IFixture"/>.
            </summary>
            <typeparam name="T">
            The type of object for which the algorithm should be customized.
            </typeparam>
            <returns>
            A <see cref="T:Ploeh.AutoFixture.Dsl.ICustomizationComposer`1"/> that can be used to customize the creation
            algorithm before creating the object.
            </returns>
            <remarks>
            <para>
            The Build method kicks off a Fluent API which is usually completed by invoking
            <see cref="M:Ploeh.AutoFixture.SpecimenFactory.CreateAnonymous``1(Ploeh.AutoFixture.Dsl.IPostprocessComposer{``0})"/> on the method
            chain.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.IFixture.Customize(Ploeh.AutoFixture.ICustomization)">
            <summary>
            Applies a customization.
            </summary>
            <param name="customization">The customization to apply.</param>
            <returns>An <see cref="T:Ploeh.AutoFixture.IFixture"/> where the customization is applied.</returns>
            <remarks>
            <para>
            Note to implementers: the returned <see cref="T:Ploeh.AutoFixture.IFixture"/> is expected to have
            <paramref name="customization"/> applied. Whether the return value is the same instance
            as the current instance, or a copy is unspecfied.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.IFixture.Customize``1(System.Func{Ploeh.AutoFixture.Dsl.ICustomizationComposer{``0},Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer})">
            <summary>
            Customizes the creation algorithm for all objects of a given type.
            </summary>
            <typeparam name="T">The type of object to customize.</typeparam>
            <param name="composerTransformation">
            A function that customizes a given <see cref="T:Ploeh.AutoFixture.Dsl.ICustomizationComposer`1"/> and returns
            the modified composer.
            </param>
        </member>
        <member name="P:Ploeh.AutoFixture.IFixture.Behaviors">
            <summary>
            Gets the behaviors that are applied when <see cref="M:Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer.Compose"/>
            is invoked.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.IFixture.Customizations">
            <summary>
            Gets customizations that <see cref="M:Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer.Compose"/> will take into
            accout.
            </summary>
            <remarks>
            <para>
            It is expected that customizations pre-empt whichever other
            <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> is created by
            <see cref="M:Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer.Compose"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Ploeh.AutoFixture.IFixture.OmitAutoProperties">
            <summary>
            Gets or sets if writable properties should generally be assigned a value when 
            generating an anonymous object.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.IFixture.RepeatCount">
            <summary>
            Gets or sets a number that controls how many objects are created when a
            <see cref="T:Ploeh.AutoFixture.Fixture"/> creates more than one anonymous objects.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.IFixture.ResidueCollectors">
            <summary>
            Gets the residue collectors that <see cref="M:Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer.Compose"/> will
            take into account.
            </summary>
            <remarks>
            <para>
            It is expected that residue collectors provide fallback mechanisms if no ealier
            <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> can handle a request.
            </para>
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.ArrayFavoringConstructorQuery">
            <summary>
            Selects public constructors ordered so that any constructor with array arguments are
            selected before any other public constructor.
            </summary>
            <remarks>
            The main target of this <see cref="T:Ploeh.AutoFixture.Kernel.IMethodQuery"/> implementation is to pick constructors
            with array arguments before any other constructor.
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.IMethodQuery">
            <summary>
            Defines a strategy for selecting methods (such as constructors or factory methods) from a
            type.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.IMethodQuery.SelectMethods(System.Type)">
            <summary>
            Selects the methods for the supplied type.
            </summary>
            <param name="type">The type.</param>
            <returns>Methods for <paramref name="type"/>.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.ArrayFavoringConstructorQuery.SelectMethods(System.Type)">
            <summary>
            Selects the constructors for the supplied type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            All public constructors for <paramref name="type"/>, giving priority to any constructor
            with one or more array arguments.
            </returns>
            <remarks>
            <para>
            Given several constructors, this implementation will favor those constructors which
            contain array arguments. Constructors with most matching arguments are returned before
            constructors with less matching arguments.
            </para>
            <para>
            Any other constructors are returned with the most modest constructors first.
            </para>
            </remarks>
            <seealso cref="T:Ploeh.AutoFixture.Kernel.ArrayFavoringConstructorQuery"/>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.ArrayRelay">
            <summary>
            Relays a request for an array to a <see cref="T:Ploeh.AutoFixture.Kernel.MultipleRequest"/> and converts the result
            to the desired array type.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.ArrayRelay.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new array based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            An array of the requested type if possible; otherwise a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/>
            instance.
            </returns>
            <remarks>
            <para>
            If <paramref name="request"/> is a request for an array and <paramref name="context"/>
            can satisfy a <see cref="T:Ploeh.AutoFixture.Kernel.MultipleRequest"/> for the element type, the return value is a
            populated array of the requested type. If not, the return value is a
            <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </para>
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.CollectionRelay">
            <summary>
            Relays a request for an <see cref="T:System.Collections.Generic.ICollection`1"/> to a request for a
            <see cref="T:System.Collections.Generic.List`1"/> and retuns the result.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.CollectionRelay.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            A populated <see cref="T:System.Collections.Generic.ICollection`1"/> of the appropriate item type if possible;
            otherwise a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
            <remarks>
            <para>
            If <paramref name="request"/> is a request for an <see cref="T:System.Collections.Generic.ICollection`1"/> and
            <paramref name="context"/> can satisfy a request for a populated specimen of that type,
            this value will be returned. If not, the return value is a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/>
            instance.
            </para>
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.CollectionSpecification">
            <summary>
            Encapsulates logic that determines whether a request is a request for a
            <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.IRequestSpecification">
            <summary>
            A Specification that evaluates requests.
            </summary>
            <remarks>
            <para>
            This is a codification of the Specification patter for requests. This interface can (and
            should) be used in any place where you need to filter requests for specimens.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.IRequestSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is satisfied by the Specification;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.CollectionSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen to determine whether it's a request for a
            <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is a request for a
            <see cref="T:System.Collections.ObjectModel.Collection`1"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.CompositeConstructorQuery">
            <summary>
            An implementation of IConstructorQuery that composes other IConstructorQuery instances.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.IConstructorQuery">
            <summary>
            Defines a strategy for selecting constructors from a type.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.IConstructorQuery.SelectConstructors(System.Type)">
            <summary>
            Selects the constructors for the supplied type.
            </summary>
            <param name="type">The type.</param>
            <returns>Constructors for <paramref name="type"/>.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.CompositeConstructorQuery.#ctor(System.Collections.Generic.IEnumerable{Ploeh.AutoFixture.Kernel.IConstructorQuery})">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.CompositeConstructorQuery"/> class.
            </summary>
            <param name="queries">The queries.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.CompositeConstructorQuery.#ctor(Ploeh.AutoFixture.Kernel.IConstructorQuery[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.CompositeConstructorQuery"/> class.
            </summary>
            <param name="queries">The queries.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.CompositeConstructorQuery.SelectConstructors(System.Type)">
            <summary>
            Selects the constructors for the supplied type by delegating to <see cref="P:Ploeh.AutoFixture.Kernel.CompositeConstructorQuery.Queries"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>
            All public constructors for <paramref name="type"/>, ordered by the order of the 
            IConstructorQuery instances in <see cref="P:Ploeh.AutoFixture.Kernel.CompositeConstructorQuery.Queries"/>.
            </returns>
            <remarks>
            <para>
            The ordering of the returned constructors is based on the order of the IConstructorQuery
            instances in <see cref="P:Ploeh.AutoFixture.Kernel.CompositeConstructorQuery.Queries"/>.
            </para>
            <para>
            In case of two constructors with an equal number of parameters, the ordering is
            unspecified.
            </para>
            </remarks>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.CompositeConstructorQuery.Queries">
            <summary>
            Gets the child builders.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.CompositeMethodQuery">
            <summary>
            An implementation of <see cref="T:Ploeh.AutoFixture.Kernel.IMethodQuery"/> that composes other IMethodQuery instances.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.CompositeMethodQuery.#ctor(System.Collections.Generic.IEnumerable{Ploeh.AutoFixture.Kernel.IMethodQuery})">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.CompositeMethodQuery"/> class.
            </summary>
            <param name="queries">The queries.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.CompositeMethodQuery.#ctor(Ploeh.AutoFixture.Kernel.IMethodQuery[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.CompositeMethodQuery"/> class.
            </summary>
            <param name="queries">The queries.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.CompositeMethodQuery.SelectMethods(System.Type)">
            <summary>
            Selects the methods for the supplied type.
            </summary>
            <param name="type">The type.</param>
            <returns>Methods for <paramref name="type"/>.</returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.CompositeMethodQuery.Queries">
            <summary>
            Gets the queries supplied through one of the constructors.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.ConstructorMethod">
            <summary>
            Encapsulates a constructor as a method.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.IMethod">
            <summary>
            Represents some kind of method that can be invoked with a known set of parameters.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.IMethod.Invoke(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Invokes the method with the supplied parameters.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The result of the method call.</returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.IMethod.Parameters">
            <summary>
            Gets information about the parameters of the method.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.ConstructorMethod.#ctor(System.Reflection.ConstructorInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.ConstructorMethod"/> class.
            </summary>
            <param name="constructor">The constructor.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.ConstructorMethod.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to this instance;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.ConstructorMethod.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data
            structures like a hash table. 
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.ConstructorMethod.Invoke(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Invokes the method with the supplied parameters.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The result of the method call.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.ConstructorMethod.Equals(Ploeh.AutoFixture.Kernel.ConstructorMethod)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="other"/>
            parameter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.ConstructorMethod.Constructor">
            <summary>
            Gets the constructor.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.ConstructorMethod.Parameters">
            <summary>
            Gets information about the parameters of the method.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.DelegateGenerator">
            <summary>
            Creates new <see cref="T:System.Delegate"/> instances.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.DelegateGenerator.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new <see cref="T:System.Delegate"/> instance.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null.</exception>
            <returns>
            A new <see cref="T:System.Delegate"/> instance, if <paramref name="request"/> is a request for a
            <see cref="T:System.Delegate"/>; otherwise, a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.DictionaryRelay">
            <summary>
            Relays a request for an <see cref="T:System.Collections.Generic.IDictionary`2"/> to a request for a
            <see cref="T:System.Collections.Generic.Dictionary`2"/> and retuns the result.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.DictionaryRelay.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            A populated <see cref="T:System.Collections.Generic.IDictionary`2"/> of the appropriate item type if
            possible; otherwise a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
            <remarks>
            <para>
            If <paramref name="request"/> is a request for an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> and <paramref name="context"/> can satisfy a
            request for a populated specimen of that type, this value will be returned. If not, the
            return value is a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </para>
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.DictionarySpecification">
            <summary>
            Encapsulates logic that determines whether a request is a request for a dictionary.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.DictionarySpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen to determine whether it's a request for a
            dictionary.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is a request for a
            <see cref="T:System.Collections.Generic.Dictionary`2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.DisposableTracker">
            <summary>
            Tracks all disposable specimens created by a decorated <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> to
            be able to dispose them when signalled.
            </summary>
            <remarks>
            <para>
            The DisposableTracker examines all specimens created by a decorated
            <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/>. All specimens that implement <see cref="T:System.IDisposable"/> are
            tracked so that they can be deterministically disposed. This happens when
            <see cref="M:Ploeh.AutoFixture.Kernel.DisposableTracker.Dispose"/> is invoked on the instance.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.DisposableTracker.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.DisposableTracker"/> class.
            </summary>
            <param name="builder">The decorated builder.</param>
            <remarks>
            <para>
            After initilization, <paramref name="builder"/> is availble through the
            <see cref="P:Ploeh.AutoFixture.Kernel.DisposableTracker.Builder"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.DisposableTracker.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The specimen created by the decorated builder.
            </returns>
            <remarks>
            <para>
            This method delegates creation of specimens to the decorated <see cref="P:Ploeh.AutoFixture.Kernel.DisposableTracker.Builder"/>.
            However, before specimens are returned they are examined and tracked in the
            <see cref="P:Ploeh.AutoFixture.Kernel.DisposableTracker.Disposables"/> list if they implement <see cref="T:System.IDisposable"/>. They can
            subsequently be disposed by invoking the <see cref="M:Ploeh.AutoFixture.Kernel.DisposableTracker.Dispose"/> method on the
            instance.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.DisposableTracker.Dispose">
            <summary>
            Disposes all items in the <see cref="P:Ploeh.AutoFixture.Kernel.DisposableTracker.Disposables"/> list and removes them from the
            list.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.DisposableTracker.Dispose(System.Boolean)">
            <summary>
            Disposes all items in the <see cref="P:Ploeh.AutoFixture.Kernel.DisposableTracker.Disposables"/> list and removes them from the
            list.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.DisposableTracker.Builder">
            <summary>
            Gets the decorated builder.
            </summary>
            <remarks>
            <para>
            This property exposes the decorated builder originally supplied to the constructor.
            </para>
            </remarks>
            <seealso cref="M:Ploeh.AutoFixture.Kernel.DisposableTracker.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)"/>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.DisposableTracker.Disposables">
            <summary>
            Gets the disposable specimens currently tracked by this instance.
            </summary>
            <remarks>
            <para>
            Items are added to this list by the <see cref="M:Ploeh.AutoFixture.Kernel.DisposableTracker.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)"/>
            method.
            </para>
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.DisposableTrackingBehavior">
            <summary>
            Decorates <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> instances with <see cref="T:Ploeh.AutoFixture.Kernel.DisposableTracker"/>
            instances.
            </summary>
            <seealso cref="T:Ploeh.AutoFixture.Kernel.DisposableTracker"/>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.DisposableTrackingBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.DisposableTrackingBehavior"/> class.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.DisposableTrackingBehavior.Transform(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Decorates the supplied builder with a <see cref="T:Ploeh.AutoFixture.Kernel.DisposableTracker"/>.
            </summary>
            <param name="builder">The builder to transform.</param>
            <returns>
            A new <see cref="T:Ploeh.AutoFixture.Kernel.DisposableTracker"/> that decorates <paramref name="builder"/>.
            </returns>
            <remarks>
            <para>
            The returned <see cref="T:Ploeh.AutoFixture.Kernel.DisposableTracker"/> is also added to the
            <see cref="P:Ploeh.AutoFixture.Kernel.DisposableTrackingBehavior.Trackers"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.DisposableTrackingBehavior.Dispose">
            <summary>
            Disposes all <see cref="P:Ploeh.AutoFixture.Kernel.DisposableTrackingBehavior.Trackers"/> and clears the list.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.DisposableTrackingBehavior.Dispose(System.Boolean)">
            <summary>
            Disposes all <see cref="P:Ploeh.AutoFixture.Kernel.DisposableTrackingBehavior.Trackers"/> and clears the list.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.DisposableTrackingBehavior.Trackers">
            <summary>
            Gets the trackers created by this instance. Each time <see cref="M:Ploeh.AutoFixture.Kernel.DisposableTrackingBehavior.Transform(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)"/> is
            invoked, a new <see cref="T:Ploeh.AutoFixture.Kernel.DisposableTracker"/> instance is created and added to this
            list.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.EnumerableRelay">
            <summary>
            Relays a request for <see cref="T:System.Collections.Generic.IEnumerable`1"/> to a <see cref="T:Ploeh.AutoFixture.Kernel.MultipleRequest"/> and
            converts the result to a sequence of the requested type.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.EnumerableRelay.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new sequence of items based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            A sequence of the requested type if possible; otherwise a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/>
            instance.
            </returns>
            <remarks>
            <para>
            If <paramref name="request"/> is a request for <see cref="T:System.Collections.Generic.IEnumerable`1"/> and
            <paramref name="context"/> can satisfy a <see cref="T:Ploeh.AutoFixture.Kernel.MultipleRequest"/> for the item
            type, the return value is a populated sequence of the requested type. If not, the
            return value is a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </para>
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.InstanceMethod">
            <summary>
            Encapsulates an instance method. This is essentially an Adapter over
            <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.InstanceMethod.#ctor(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.InstanceMethod"/> class.
            </summary>
            <param name="instanceMethod">The instance method.</param>
            <param name="owner">The owner.</param>
            <remarks>
            <para>
            The owner is expected to expose the method designated by
            <paramref name="instanceMethod"/>. If not, the <see cref="M:Ploeh.AutoFixture.Kernel.InstanceMethod.Invoke(System.Collections.Generic.IEnumerable{System.Object})"/> method will fail.
            </para>
            </remarks>
            <seealso cref="M:Ploeh.AutoFixture.Kernel.InstanceMethod.Invoke(System.Collections.Generic.IEnumerable{System.Object})"/>
            <seealso cref="P:Ploeh.AutoFixture.Kernel.InstanceMethod.Method"/>
            <seealso cref="P:Ploeh.AutoFixture.Kernel.InstanceMethod.Owner"/>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.InstanceMethod.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to this
            instance; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.InstanceMethod.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data
            structures like a hash table. 
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.InstanceMethod.Invoke(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Invokes the method with the supplied parameters.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The result of the method call.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.InstanceMethod.Equals(Ploeh.AutoFixture.Kernel.InstanceMethod)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="other"/>
            parameter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.InstanceMethod.Method">
            <summary>
            Gets the method originally supplied through the constructor.
            </summary>
            <seealso cref="M:Ploeh.AutoFixture.Kernel.InstanceMethod.#ctor(System.Reflection.MethodInfo,System.Object)"/>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.InstanceMethod.Owner">
            <summary>
            Gets the owner originally supplied through the constructor.
            </summary>
            <seealso cref="M:Ploeh.AutoFixture.Kernel.InstanceMethod.#ctor(System.Reflection.MethodInfo,System.Object)"/>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.InstanceMethod.Parameters">
            <summary>
            Gets information about the parameters of the method.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.MethodInvoker">
            <summary>
            Creates a new instance of the requested type by invoking the first method it can
            satisfy.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.MethodInvoker.#ctor(Ploeh.AutoFixture.Kernel.IMethodQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.MethodInvoker"/> class with the supplied
            <see cref="T:Ploeh.AutoFixture.Kernel.IMethodQuery"/>.
            </summary>
            <param name="query">
            The <see cref="T:Ploeh.AutoFixture.Kernel.IMethodQuery"/> that defines which methods are attempted.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.MethodInvoker.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a specimen of the requested type by invoking the first constructor or method it
            can satisfy.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            A specimen generated from a method of the requested type, if possible;
            otherwise, <see langword="null"/>.
            </returns>
            <remarks>
            <para>
            This method uses the first constructor or method returned by <see cref="P:Ploeh.AutoFixture.Kernel.MethodInvoker.Query"/> where
            <paramref name="context"/> can create values for all parameters.
            </para>
            </remarks>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.MethodInvoker.Query">
            <summary>
            Gets the <see cref="T:Ploeh.AutoFixture.Kernel.IMethodQuery"/> that defines which constructors will be
            attempted.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.StaticMethod">
            <summary>
            Encapsulates a static method.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.StaticMethod.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.StaticMethod"/> class.
            </summary>
            <param name="methodInfo">The methodInfo.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.StaticMethod.#ctor(System.Reflection.MethodInfo,System.Reflection.ParameterInfo[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.StaticMethod"/> class.
            </summary>
            <param name="methodInfo">The method info.</param>
            <param name="methodParameters">The method parameters.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.StaticMethod.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
              </exception>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.StaticMethod.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data
            structures like a hash table. 
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.StaticMethod.Invoke(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Invokes the method with the supplied parameters.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The result of the method call.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.StaticMethod.Equals(Ploeh.AutoFixture.Kernel.StaticMethod)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.StaticMethod.Method">
            <summary>
            Gets the method.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.StaticMethod.Parameters">
            <summary>
            Gets information about the parameters of the method.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.HashSetSpecification">
            <summary>
            Encapsulates logic that determines whether a request is a request for a
            <see cref="T:System.Collections.Generic.HashSet`1"/>.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.HashSetSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen to determine whether it's a request for a
            <see cref="T:System.Collections.Generic.HashSet`1"/>.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is a request for a
            <see cref="T:System.Collections.Generic.HashSet`1"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.FactoryMethodQuery">
            <summary>
            Selects public factory methods ordered by the modest first.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.FactoryMethodQuery.SelectConstructors(System.Type)">
            <summary>
            Selects the public factory methods for the supplied type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            All public factory methods for <paramref name="type"/>, ordered by the modest first.
            </returns>
            <remarks>
            <para>
            The ordering of the returned methods is based on the number of parameters of the
            method. Methods with fewer parameters are returned before methods with more
            parameters. This means that if a default parameterless factory methods exists, it
            will be the first one returned.
            </para>
            <para>
            In case of two factory methods with an equal number of parameters, the ordering is
            unspecified.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.FactoryMethodQuery.SelectMethods(System.Type)">
            <summary>
            Selects the public factory methods for the supplied type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            All public factory methods for <paramref name="type"/>, ordered by the modest first.
            </returns>
            <remarks>
            <para>
            The ordering of the returned methods is based on the number of parameters of the
            method. Methods with fewer parameters are returned before methods with more
            parameters. This means that if a default parameterless factory methods exists, it
            will be the first one returned.
            </para>
            <para>
            In case of two factory methods with an equal number of parameters, the ordering is
            unspecified.
            </para>
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.ListFavoringConstructorQuery">
            <summary>
            Selects public constructors ordered so that any constructor with arguments matching
            <see cref="T:System.Collections.Generic.IList`1"/> are selected before any other public constructor.
            </summary>
            <remarks>
            The main target of this <see cref="T:Ploeh.AutoFixture.Kernel.IConstructorQuery"/> implementation is to pick
            <see cref="M:System.Collections.ObjectModel.Collection`1.#ctor(System.Collections.Generic.IList{`0})"/> before any other
            constructor. This can be used to populate a Collection instance with a list of items.
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.ListFavoringConstructorQuery.SelectConstructors(System.Type)">
            <summary>
            Selects the constructors for the supplied type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            All public constructors for <paramref name="type"/>, giving priority to any constructor
            with one or more <see cref="T:System.Collections.Generic.IList`1"/> arguments.
            </returns>
            <remarks>
            <para>
            Given several constructors, this implementation will favor those constructors with
            arguments that matches <see cref="T:System.Collections.Generic.IList`1"/>, where T is the item type of
            <paramref name="type"/>, if it's generic. Constructors with most matching arguments are
            returned before constructors with less matching arguments.
            </para>
            <para>
            Any other constructors are returned with the most modest constructors first.
            </para>
            </remarks>
            <seealso cref="T:Ploeh.AutoFixture.Kernel.ListFavoringConstructorQuery"/>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.ListFavoringConstructorQuery.SelectMethods(System.Type)">
            <summary>
            Selects the constructors for the supplied type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            All public constructors for <paramref name="type"/>, giving priority to any constructor
            with one or more <see cref="T:System.Collections.Generic.IList`1"/> arguments.
            </returns>
            <remarks>
            <para>
            Given several constructors, this implementation will favor those constructors with
            arguments that matches <see cref="T:System.Collections.Generic.IList`1"/>, where T is the item type of
            <paramref name="type"/>, if it's generic. Constructors with most matching arguments are
            returned before constructors with less matching arguments.
            </para>
            <para>
            Any other constructors are returned with the most modest constructors first.
            </para>
            </remarks>
            <seealso cref="T:Ploeh.AutoFixture.Kernel.ListFavoringConstructorQuery"/>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.ListRelay">
            <summary>
            Relays a request for an <see cref="T:System.Collections.Generic.IList`1"/> to a request for a
            <see cref="T:System.Collections.Generic.List`1"/> and retuns the result.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.ListRelay.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            A populated <see cref="T:System.Collections.Generic.IList`1"/> of the appropriate item type if possible; otherwise
            a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
            <remarks>
            <para>
            If <paramref name="request"/> is a request for an <see cref="T:System.Collections.Generic.IList`1"/> and
            <paramref name="context"/> can satisfy a request for a populated specimen of that type,
            this value will be returned. If not, the return value is a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/>
            instance.
            </para>
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.ListSpecification">
            <summary>
            Encapsulates logic that determines whether a request is a request for a
            <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.ListSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen to determine whether it's a request for a
            <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is a request for a
            <see cref="T:System.Collections.Generic.List`1"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.FixedBuilder">
            <summary>
            A <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> that always returns the same specimen.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.FixedBuilder.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.FixedBuilder"/> class.
            </summary>
            <param name="specimen">
            The specimen to return from the <see cref="M:Ploeh.AutoFixture.Kernel.FixedBuilder.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)"/> method.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.FixedBuilder.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Returns the same specimen every time.
            </summary>
            <param name="request">The request that describes what to create. Ignored.</param>
            <param name="context">
            A context that can be used to create other specimens. Ignored.
            </param>
            <returns>
            The specimen supplied to the instance in the constructor.
            </returns>
            <seealso cref="M:Ploeh.AutoFixture.Kernel.FixedBuilder.#ctor(System.Object)"/>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.GreedyConstructorQuery">
            <summary>
            Selects public constructors ordered by the most greedy constructor first.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.GreedyConstructorQuery.SelectConstructors(System.Type)">
            <summary>
            Selects the constructors for the supplied type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            All public constructors for <paramref name="type"/>, ordered by the most greedy
            constructor first.
            </returns>
            <remarks>
            <para>
            The ordering of the returned constructors is based on the number of parameters of the
            constructor. Constructors with more parameters are returned before constructors with
            fewer parameters. This means that if a default constructor exists, it will be the last
            one returned.
            </para>
            <para>
            In case of two constructors with an equal number of parameters, the ordering is
            unspecified.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.GreedyConstructorQuery.SelectMethods(System.Type)">
            <summary>
            Selects the constructors for the supplied type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            All public constructors for <paramref name="type"/>, ordered by the most greedy
            constructor first.
            </returns>
            <remarks>
            <para>
            The ordering of the returned constructors is based on the number of parameters of the
            constructor. Constructors with more parameters are returned before constructors with
            fewer parameters. This means that if a default constructor exists, it will be the last
            one returned.
            </para>
            <para>
            In case of two constructors with an equal number of parameters, the ordering is
            unspecified.
            </para>
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.IllegalRequestException">
            <summary>
            Indicates that an illigal request was detected.
            </summary>
            <remarks>
            <para>
            Certain requests are considered illegal (such as <see cref="T:System.IntPtr"/>) because satisfying
            them can crash the process.
            </para>
            </remarks>
            <seealso cref="T:Ploeh.AutoFixture.Kernel.IntPtrGuard"/>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.IllegalRequestException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.IllegalRequestException"/> class.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.IllegalRequestException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.IllegalRequestException"/> class with an
            error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.IllegalRequestException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.IllegalRequestException"/> class with an
            error message and an inner exception.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.IllegalRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.IllegalRequestException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the
            serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains
            contextual information about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.IntPtrGuard">
            <summary>
            Guards against requests for <see cref="T:System.IntPtr"/> by throwing an exception.
            </summary>
            <remarks>
            <para>
            Some types (e.g. <see cref="T:System.Func`1"/>) have constructors that take an <see cref="T:System.IntPtr"/>
            instance that indicate the address of the code block to be executed. IntPtr in itself have
            several constructors, amongst a few that AutoFixture thinks it can resolve; e.g. the
            constructor that takes an <see cref="T:System.Int32"/> as input. This means that AutoFixture, unless
            prevented, will create IntPtr instances with completely invalid addresses such as 1 or 2.
            When code attempts to use these invalid IntPtr instances, the process crashes.
            </para>
            <para>
            To prevent the process from crashing, AutoFixture considers request for IntPtr instances
            illegal. This class implements that rule by throwing an exception if such a request is
            detected.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.IntPtrGuard.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Guards against requests for <see cref="T:System.IntPtr"/>.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            A <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance, unless <paramref name="request"/> is a request for
            <see cref="T:System.IntPtr"/> in which case an exceptoin is thrown.
            </returns>
            <exception cref="T:Ploeh.AutoFixture.Kernel.IllegalRequestException">
            <paramref name="request"/> is the <see cref="T:System.IntPtr"/> <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="T:Ploeh.AutoFixture.Dsl.NullComposer`1">
            <summary>
            An <see cref="T:Ploeh.AutoFixture.Dsl.ICustomizationComposer`1"/> that does not customize anything, but can still
            compose an <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> - typically by returning the instance it is
            configured to use.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.NullComposer`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Dsl.NullComposer`1"/> class.
            </summary>
            <remarks>
            <para>
            Initialized in this way, <see cref="M:Ploeh.AutoFixture.Dsl.NullComposer`1.Compose"/> will return an empty
            <see cref="T:Ploeh.AutoFixture.Kernel.CompositeSpecimenBuilder"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.NullComposer`1.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Dsl.NullComposer`1"/> class with an
            <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> that will be returned by the <see cref="M:Ploeh.AutoFixture.Dsl.NullComposer`1.Compose"/>
            method.
            </summary>
            <param name="builder">
            The builder to return by the <see cref="M:Ploeh.AutoFixture.Dsl.NullComposer`1.Compose"/> method.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.NullComposer`1.#ctor(System.Func{Ploeh.AutoFixture.Kernel.ISpecimenBuilder})">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Dsl.NullComposer`1"/> class with a
            function used to implement the <see cref="M:Ploeh.AutoFixture.Dsl.NullComposer`1.Compose"/> method.
            </summary>
            <param name="factory">
            The function that will be used to implement <see cref="M:Ploeh.AutoFixture.Dsl.NullComposer`1.Compose"/>.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.NullComposer`1.FromSeed(System.Func{`0,`0})">
            <summary>
            Does nothing.
            </summary>
            <param name="factory">Ignored.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.NullComposer`1.FromFactory(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Does nothing.
            </summary>
            <param name="factory">Ignored.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.NullComposer`1.FromFactory(System.Func{`0})">
            <summary>
            Does nothing
            </summary>
            <param name="factory">Ignored.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.NullComposer`1.FromFactory``1(System.Func{``0,`0})">
            <summary>
            Does nothing
            </summary>
            <param name="factory">Ignored.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.NullComposer`1.FromFactory``2(System.Func{``0,``1,`0})">
            <summary>
            Does nothing
            </summary>
            <param name="factory">Ignored.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.NullComposer`1.FromFactory``3(System.Func{``0,``1,``2,`0})">
            <summary>
            Does nothing
            </summary>
            <param name="factory">Ignored.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.NullComposer`1.FromFactory``4(System.Func{``0,``1,``2,``3,`0})">
            <summary>
            Does nothing
            </summary>
            <param name="factory">Ignored.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.NullComposer`1.Do(System.Action{`0})">
            <summary>
            Does nothing
            </summary>
            <param name="action">Ignored.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.NullComposer`1.OmitAutoProperties">
            <summary>
            Does nothing
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.NullComposer`1.With``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Does nothing
            </summary>
            <param name="propertyPicker">Ignored.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.NullComposer`1.With``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Does nothing
            </summary>
            <param name="propertyPicker">Ignored.</param>
            <param name="value">Ignored.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.NullComposer`1.WithAutoProperties">
            <summary>
            Does nothing
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.NullComposer`1.Without``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Does nothing
            </summary>
            <param name="propertyPicker">Ignored.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Dsl.NullComposer`1.Compose">
            <summary>
            Composes a new <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> instance.
            </summary>
            <returns>
            An <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> instance.
            </returns>
            <remarks>
            <para>
            Which <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> is returned depends on how the
            <see cref="T:Ploeh.AutoFixture.Dsl.NullComposer`1"/> instance was configured through its constructor.
            </para>
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.AndRequestSpecification">
            <summary>
            A boolean 'And' Composite <see cref="T:Ploeh.AutoFixture.Kernel.IRequestSpecification"/>.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.AndRequestSpecification.#ctor(Ploeh.AutoFixture.Kernel.IRequestSpecification[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.AndRequestSpecification"/> with the
            supplied specifications.
            </summary>
            <param name="specifications">An array of <see cref="T:Ploeh.AutoFixture.Kernel.IRequestSpecification"/>.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.AndRequestSpecification.#ctor(System.Collections.Generic.IEnumerable{Ploeh.AutoFixture.Kernel.IRequestSpecification})">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.AndRequestSpecification"/> class with the
            supplied specifications.
            </summary>
            <param name="specifications">A sequence of <see cref="T:Ploeh.AutoFixture.Kernel.IRequestSpecification"/>.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.AndRequestSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is satisfied by all
            <see cref="P:Ploeh.AutoFixture.Kernel.AndRequestSpecification.Specifications"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.AndRequestSpecification.Specifications">
            <summary>
            Gets the decorated specifications.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.AnyTypeSpecification">
            <summary>
            A specification that evaluates whether a request is a request for a type.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.AnyTypeSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is a <see cref="T:System.Type"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.AutoPropertiesCommand">
            <summary>
            A command that assigns anonymous values to all writable properties and fields of a type.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.AutoPropertiesCommand`1">
            <summary>
            A command that assigns anonymous values to all writable properties and fields of a type.
            </summary>
            <typeparam name="T">The specimen type on which properties are assigned.</typeparam>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.ISpecifiedSpecimenCommand`1">
            <summary>
            A Command that performs an action on a specimen and knows whether that action matches a
            given request.
            </summary>
            <typeparam name="T">The type of specimen on which the command acts.</typeparam>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.ISpecifiedSpecimenCommand`1.Execute(`0,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Executes the command on the supplied specimen.
            </summary>
            <param name="specimen">The specimen on which the command is executed.</param>
            <param name="context">
            An <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenContext"/> that can be used to resolve other requests.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.AutoPropertiesCommand`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.AutoPropertiesCommand`1"/> class.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.AutoPropertiesCommand`1.#ctor(Ploeh.AutoFixture.Kernel.IRequestSpecification)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.AutoPropertiesCommand`1"/> class with the
            the supplied specification.
            </summary>
            <param name="specification">
            A specification that is used as a filter to include properties or fields.
            </param>
            <remarks>
            <para>
            Only properties or fields satisfied by <paramref name="specification"/> will get
            assigned values.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.AutoPropertiesCommand`1.Execute(`0,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Assigns anonymous values to properties and fields on a specimen
            </summary>
            <param name="specimen">
            The specimen on which property and field values will be assigned.
            </param>
            <param name="context">
            An <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenContext"/> that is used to create property and field values.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.AutoPropertiesCommand`1.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates whether a request matches a property or field affected by this command.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is a <see cref="T:System.Reflection.PropertyInfo"/>
            or <see cref="T:System.Reflection.FieldInfo"/> that identifies a property or field affected by this
            <see cref="T:Ploeh.AutoFixture.Kernel.AutoPropertiesCommand`1"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.AutoPropertiesCommand`1.GetSpecimenType(System.Object)">
            <summary>
            Gets the type of the specimen.
            </summary>
            <param name="specimen">The specimen.</param>
            <returns>The type of the specimen.</returns>
            <remarks>
            <para>
            This implementation ignores <paramref name="specimen"/> and returns the type parameter
            of <see cref="T:Ploeh.AutoFixture.Kernel.AutoPropertiesCommand`1"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.AutoPropertiesCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.AutoPropertiesCommand"/> class.
            </summary>
            <remarks>
            <para>
            When created without an explicit specimen type, the <see cref="T:Ploeh.AutoFixture.Kernel.AutoPropertiesCommand"/>
            will infer the specimen type from the actual specimen instance.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.AutoPropertiesCommand.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.AutoPropertiesCommand"/> class with the
            supplied specimen type.
            </summary>
            <param name="specimenType">The specimen type on which properties are assigned.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.AutoPropertiesCommand.#ctor(System.Type,Ploeh.AutoFixture.Kernel.IRequestSpecification)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.AutoPropertiesCommand"/> class with the
            supplied specimen type and specification.
            </summary>
            <param name="specimenType">The specimen type on which properties are assigned.</param>
            <param name="specification">
            A specification that is used as a filter to include properties or fields.
            </param>
            <remarks>
            <para>
            Only properties or fields satisfied by <paramref name="specification"/> will get
            assigned values.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.AutoPropertiesCommand.GetSpecimenType(System.Object)">
            <summary>
            Gets the type of the specimen.
            </summary>
            <param name="specimen">The specimen.</param>
            <returns>The type of the specimen.</returns>
            <remarks>
            This implementation may ignore <paramref name="specimen"/> and instead return the type
            passed to the <see cref="T:Ploeh.AutoFixture.Kernel.AutoPropertiesCommand"/> constructor.
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.FalseRequestSpecification">
            <summary>
            A <see cref="T:Ploeh.AutoFixture.Kernel.IRequestSpecification"/> that is always <see langword="false"/>.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.FalseRequestSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.FieldRequestRelay">
            <summary>
            Relays a request for a field to a <see cref="T:Ploeh.AutoFixture.Kernel.SeededRequest"/> with a seed based
            on the field's name.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.FieldRequestRelay.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a requested field.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A container that can be used to create other specimens.</param>
            <returns>
            A specimen created from a <see cref="T:Ploeh.AutoFixture.Kernel.SeededRequest"/> encapsulating the field type
            and name of the requested field, if possible; otherwise, a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/>
            instance.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.FilteringSpecimenBuilder">
            <summary>
            Decorates an <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> and filters requests so that only some requests
            are passed through to the decorated builder.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.FilteringSpecimenBuilder.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder,Ploeh.AutoFixture.Kernel.IRequestSpecification)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.FilteringSpecimenBuilder"/> class.
            </summary>
            <param name="builder">A specimen builder to decorate.</param>
            <param name="specification">
            A specification that determines whether <paramref name="builder"/> will receive the request.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.FilteringSpecimenBuilder.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A container that can be used to create other specimens.</param>
            <returns>
            A specimen created by the decorated <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> if the filter allows
            the request through; otherwise, a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.FilteringSpecimenBuilder.Builder">
            <summary>
            Gets the decorated builder.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.FilteringSpecimenBuilder.Specification">
            <summary>
            Gets the specification that determines whether <see cref="P:Ploeh.AutoFixture.Kernel.FilteringSpecimenBuilder.Builder"/> will be invoked or
            not.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.InverseRequestSpecification">
            <summary>
            Decorates an <see cref="T:Ploeh.AutoFixture.Kernel.IRequestSpecification"/> and returns the opposite result.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.InverseRequestSpecification.#ctor(Ploeh.AutoFixture.Kernel.IRequestSpecification)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.InverseRequestSpecification"/> by
            decorating the supplied specification.
            </summary>
            <param name="specification">
            The <see cref="T:Ploeh.AutoFixture.Kernel.IRequestSpecification"/> to decorate.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.InverseRequestSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Returns the opposite result as the decorated <see cref="T:Ploeh.AutoFixture.Kernel.IRequestSpecification"/>.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if the decorated <see cref="T:Ploeh.AutoFixture.Kernel.IRequestSpecification"/> returns
            <see langword="false"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.InverseRequestSpecification.Specification">
            <summary>
            Gets the decorated specification.
            </summary>
            <remarks>
            <para>
            This is the <see cref="T:Ploeh.AutoFixture.Kernel.IRequestSpecification"/> that will be inverted.
            </para>
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.FiniteSequenceRequest">
            <summary>
            Signals that many similar instances are requested.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.FiniteSequenceRequest.#ctor(System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.FiniteSequenceRequest"/> class.
            </summary>
            <param name="request">The underlying request to muliply.</param>
            <param name="count">The number of instances requested.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.FiniteSequenceRequest.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to this instance;
            otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.FiniteSequenceRequest.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data
            structures like a hash table. 
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.FiniteSequenceRequest.CreateRequests">
            <summary>
            Creates many requests from the underlying requests.
            </summary>
            <returns>A number of similar requests.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.FiniteSequenceRequest.Equals(Ploeh.AutoFixture.Kernel.FiniteSequenceRequest)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if <paramref name="other"/> represents the same request with the
            same requested count; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.FiniteSequenceRelay">
            <summary>
            Unwraps a request for many instances and returns the results as a true dynamic sequence.
            </summary>
            <seealso cref="T:Ploeh.AutoFixture.Kernel.StableFiniteSequenceRelay"/>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.FiniteSequenceRelay.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates many specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            Many specimens if <paramref name="request"/> is a <see cref="T:Ploeh.AutoFixture.Kernel.FiniteSequenceRequest"/>
            instance; otherwise a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
            <remarks>
            <para>
            The sequence returned is a true generator, so successive iterations will yield
            different sets of specimens. If this is not the desired behavior,
            <see cref="T:Ploeh.AutoFixture.Kernel.StableFiniteSequenceRelay"/> provides an alternative.
            </para>
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.MultipleRequest">
            <summary>
            Represents a request for many (an unspecified number) of specimens.
            </summary>
            <remarks>
            <para>
            The difference between <see cref="T:Ploeh.AutoFixture.Kernel.MultipleRequest"/> and
            <see cref="T:Ploeh.AutoFixture.Kernel.FiniteSequenceRequest"/> is that the latter specifies the number of specimens
            requested.
            </para>
            <para>
            <see cref="T:Ploeh.AutoFixture.Kernel.MultipleRelay"/> translates <see cref="T:Ploeh.AutoFixture.Kernel.MultipleRequest"/> instances to
            <see cref="T:Ploeh.AutoFixture.Kernel.FiniteSequenceRequest"/> instances.
            </para>
            </remarks>
            <seealso cref="T:Ploeh.AutoFixture.Kernel.FiniteSequenceRequest"/>
            <seealso cref="T:Ploeh.AutoFixture.Kernel.MultipleRelay"/>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.MultipleRequest.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.MultipleRequest"/> class.
            </summary>
            <param name="request">A single request which will be multiplied.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.MultipleRequest.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> is a <see cref="T:Ploeh.AutoFixture.Kernel.MultipleRequest"/>
            instance which is equal to this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.MultipleRequest.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data
            structures like a hash table.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.MultipleRequest.Equals(Ploeh.AutoFixture.Kernel.MultipleRequest)">
            <summary>
            Indicates whether the current <see cref="T:Ploeh.AutoFixture.Kernel.MultipleRequest"/> is equal to another
            MultipleRequest instance.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current <see cref="T:Ploeh.AutoFixture.Kernel.MultipleRequest"/> is equal to the
            <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.MultipleRequest.Request">
            <summary>
            Gets the request to multiply.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.MultipleRelay">
            <summary>
            Relays requests for multiple (an unspecified count) specimens to a request for a specific
            number of specimens.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.MultipleRelay.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.MultipleRelay"/> class.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.MultipleRelay.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates many new specimens based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The requested specimens if possible; otherwise a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
            <remarks>
            <para>
            The number of specimens requested is determined by <see cref="P:Ploeh.AutoFixture.Kernel.MultipleRelay.Count"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.MultipleRelay.Count">
            <summary>
            Gets or sets the count that specifies how many specimens will be requested.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.MemberInfoEqualityComparer">
            <summary>
            Provides custom equality comparison for <see cref="T:System.Reflection.MemberInfo"/> instances.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.MemberInfoEqualityComparer.Equals(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first <see cref="T:System.Reflection.MemberInfo"/> instance to compare.</param>
            <param name="y">The second <see cref="T:System.Reflection.MemberInfo"/> instance to compare.</param>
            <returns>
            <see langword="true"/> if the specified objects are considered equal; otherwise,
            <see langword="false"/>.
            </returns>
            <remarks>
            <para>
            <paramref name="x"/> and <paramref name="y"/> are considered equal if x is exactly
            equal to y. If not, they are still considered equal if both instances'
            <see cref="P:System.Reflection.MemberInfo.DeclaringType"/> and <see cref="P:System.Reflection.MemberInfo.Name"/> properties are
            equal.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.MemberInfoEqualityComparer.GetHashCode(System.Reflection.MemberInfo)">
            <summary>
            Returns a hash code for a <see cref="T:System.Reflection.MemberInfo"/> instance.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            A hash code for the supplied instance, suitable for use in hashing algorithms and data
            structures like a hash table. 
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is
            null.
            </exception>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.ModestConstructorQuery">
            <summary>
            Selects public constructors ordered by the most modest constructor first.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.ModestConstructorQuery.SelectConstructors(System.Type)">
            <summary>
            Selects the constructors for the supplied type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            All public constructors for <paramref name="type"/>, ordered by the most modest
            constructor first.
            </returns>
            <remarks>
            <para>
            The ordering of the returned constructors is based on the number of parameters of the
            constructor. Constructors with fewer parameters are returned before constructors with
            more parameters. This means that if a default constructor exists, it will be the first
            one returned.
            </para>
            <para>
            In case of two constructors with an equal number of parameters, the ordering is
            unspecified.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.ModestConstructorQuery.SelectMethods(System.Type)">
            <summary>
            Selects the constructors for the supplied type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            All public constructors for <paramref name="type"/>, ordered by the most modest
            constructor first.
            </returns>
            <remarks>
            <para>
            The ordering of the returned constructors is based on the number of parameters of the
            constructor. Constructors with fewer parameters are returned before constructors with
            more parameters. This means that if a default constructor exists, it will be the first
            one returned.
            </para>
            <para>
            In case of two constructors with an equal number of parameters, the ordering is
            unspecified.
            </para>
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.NoSpecimenOutputGuard">
            <summary>
            Prevents a decorated <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> from returning a
            <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.NoSpecimenOutputGuard.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimenOutputGuard"/> class with an 
            <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> to decorate.
            </summary>
            <param name="builder">The builder to decorate.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.NoSpecimenOutputGuard.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder,Ploeh.AutoFixture.Kernel.IRequestSpecification)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimenOutputGuard"/> class with an
            <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> to decorate and an <see cref="T:Ploeh.AutoFixture.Kernel.IRequestSpecification"/>
            that is used to determine whether an exception should be thrown based on the request.
            </summary>
            <param name="builder">The builder to decorate.</param>
            <param name="specification">The specification.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.NoSpecimenOutputGuard.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen by delegating to the decorated <see cref="P:Ploeh.AutoFixture.Kernel.NoSpecimenOutputGuard.Builder"/>.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The requested specimen if possible; otherwise an exception is thrown or a
            <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance is returned.
            </returns>
            <exception cref="T:Ploeh.AutoFixture.ObjectCreationException">
            The decorated <see cref="P:Ploeh.AutoFixture.Kernel.NoSpecimenOutputGuard.Builder"/> returned a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> result and
            <see cref="P:Ploeh.AutoFixture.Kernel.NoSpecimenOutputGuard.Specification"/> returned <see langword="true"/> for
            <paramref name="request"/>.
            </exception>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.NoSpecimenOutputGuard.Builder">
            <summary>
            Gets the decorated builder.
            </summary>
            <value>The <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> supplied via the constructor.</value>
            <seealso cref="M:Ploeh.AutoFixture.Kernel.NoSpecimenOutputGuard.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)"/>
            <seealso cref="M:Ploeh.AutoFixture.Kernel.NoSpecimenOutputGuard.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder,Ploeh.AutoFixture.Kernel.IRequestSpecification)"/>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.NoSpecimenOutputGuard.Specification">
            <summary>
            Gets the specification that is used to determine whether an exception should be thrown
            for a request that returns a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </summary>
            <value>The <see cref="T:Ploeh.AutoFixture.Kernel.IRequestSpecification"/> supplied via the constructor.</value>
            <seealso cref="M:Ploeh.AutoFixture.Kernel.NoSpecimenOutputGuard.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)"/>
            <seealso cref="M:Ploeh.AutoFixture.Kernel.NoSpecimenOutputGuard.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder,Ploeh.AutoFixture.Kernel.IRequestSpecification)"/>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.EnumerableFavoringConstructorQuery">
            <summary>
            Selects public constructors ordered so that any constructor with arguments matching
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> are selected before any other public constructor.
            </summary>
            <remarks>
            The main target of this <see cref="T:Ploeh.AutoFixture.Kernel.IConstructorQuery"/> implementation is to pick
            <see cref="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})"/> before any other constructor. This can be used to
            populate a list instance with a sequence of items.
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.EnumerableFavoringConstructorQuery.SelectConstructors(System.Type)">
            <summary>
            Selects the constructors for the supplied type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            All public constructors for <paramref name="type"/>, giving priority to any constructor
            with one or more <see cref="T:System.Collections.Generic.IEnumerable`1"/> arguments.
            </returns>
            <remarks>
            <para>
            Given several constructors, this implementation will favor those constructors with
            arguments that matches <see cref="T:System.Collections.Generic.IEnumerable`1"/>, where T is the item type of
            <paramref name="type"/>, if it's generic. Constructors with most matching arguments are
            returned before constructors with less matching arguments.
            </para>
            <para>
            Any other constructors are returned with the most modest constructors first.
            </para>
            </remarks>
            <seealso cref="T:Ploeh.AutoFixture.Kernel.EnumerableFavoringConstructorQuery"/>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.EnumerableFavoringConstructorQuery.SelectMethods(System.Type)">
            <summary>
            Selects the constructors for the supplied type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            All public constructors for <paramref name="type"/>, giving priority to any constructor
            with one or more <see cref="T:System.Collections.Generic.IEnumerable`1"/> arguments.
            </returns>
            <remarks>
            <para>
            Given several constructors, this implementation will favor those constructors with
            arguments that matches <see cref="T:System.Collections.Generic.IEnumerable`1"/>, where T is the item type of
            <paramref name="type"/>, if it's generic. Constructors with most matching arguments are
            returned before constructors with less matching arguments.
            </para>
            <para>
            Any other constructors are returned with the most modest constructors first.
            </para>
            </remarks>
            <seealso cref="T:Ploeh.AutoFixture.Kernel.EnumerableFavoringConstructorQuery"/>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.NullableEnumRequestSpecification">
            <summary>
            A specification that evaluates whether a request is a request for a nullable enum.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.NullableEnumRequestSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is a request for a nullable enum;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.StableFiniteSequenceRelay">
            <summary>
            Unwraps a request for many instances and returns the results as a stable list.
            </summary>
            <remarks>
            <para>
            In contrast to <see cref="T:Ploeh.AutoFixture.Kernel.FiniteSequenceRelay"/> this alternative implementation returns
            the sequence wrapped in a <see cref="T:System.Collections.Generic.List`1"/>. This means that the iterator will
            yield the same instances across multiple iterations.
            </para>
            <para>
            By default this class is not used by <see cref="T:Ploeh.AutoFixture.Fixture"/>, but it can be used to override
            the dynamic enumerable behavior by adding it to <see cref="P:Ploeh.AutoFixture.Fixture.Customizations"/>.
            </para>
            </remarks>
            <seealso cref="T:Ploeh.AutoFixture.Kernel.FiniteSequenceRelay"/>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.StableFiniteSequenceRelay.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            Many specimens if <paramref name="request"/> is a <see cref="T:Ploeh.AutoFixture.Kernel.FiniteSequenceRequest"/>
            instance; otherwise a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
            <remarks>
            <para>
            The sequence of specimens returned is stable which means that it can be iterated over
            more than once and be expected to yield the same instances every time.
            </para>
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.MultipleCustomization">
            <summary>
            A customization that enables conventions for well-known types that represents multiple
            items.
            </summary>
            <remarks>
            <para>
            When this customization is added to an <see cref="T:Ploeh.AutoFixture.IFixture"/> instance, requests for
            common sequence and collection types will be satisfied with instances populated with
            multiple items.
            </para>
            <para>
            Normally, <see cref="T:Ploeh.AutoFixture.Fixture"/> can satisfy requests for <see cref="T:System.Collections.Generic.List`1"/> and similar
            collection types, but the returned instances will be empty. When the
            <see cref="T:Ploeh.AutoFixture.MultipleCustomization"/> is added to an <see cref="T:Ploeh.AutoFixture.IFixture"/>, such
            collection specimens will be populated with items.
            </para>
            <para>
            Please note that apart from the concrete types <see cref="T:System.Collections.Generic.List`1"/>,
            <see cref="T:System.Collections.ObjectModel.Collection`1"/> etc. this
            <see cref="T:Ploeh.AutoFixture.ICustomization"/> also resolves requests for the related interfaces
            <see cref="T:System.Collections.Generic.IList`1"/>, <see cref="T:System.Collections.Generic.ICollection`1"/> etc. This can potentially conflict
            with other customizations, such as the auto-mocking extensions for AutoFixture. In this
            case latest customization to be added to a Fixture wins.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.MultipleCustomization.Customize(Ploeh.AutoFixture.IFixture)">
            <summary>
            Customizes the specified fixture by adding conventions for populating sequences and
            collections.
            </summary>
            <param name="fixture">The fixture to customize.</param>
            <seealso cref="T:Ploeh.AutoFixture.MultipleCustomization"/>
        </member>
        <member name="T:Ploeh.AutoFixture.NullRecursionBehavior">
            <summary>
            Decorates a <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> with a <see cref="T:Ploeh.AutoFixture.Kernel.NullRecursionGuard"/>.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.NullRecursionBehavior.Transform(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Decorates the supplied <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> with a
            <see cref="T:Ploeh.AutoFixture.Kernel.NullRecursionGuard"/>.
            </summary>
            <param name="builder">The builder to decorate.</param>
            <returns>
            <paramref name="builder"/> decorated with a <see cref="T:Ploeh.AutoFixture.Kernel.NullRecursionGuard"/>.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.SeedRequestSpecification">
            <summary>
            A specification that evaluates seeded requests for types against a target type.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.SeedRequestSpecification.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.SeedRequestSpecification"/> class.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.SeedRequestSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is a <see cref="T:Ploeh.AutoFixture.Kernel.SeededRequest"/>
            for a type that matches <see cref="P:Ploeh.AutoFixture.Kernel.SeedRequestSpecification.TargetType"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.SeedRequestSpecification.TargetType">
            <summary>
            Gets the type targeted by this <see cref="T:Ploeh.AutoFixture.Kernel.IRequestSpecification"/>.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.SpecifiedNullCommand`2">
            <summary>
            A no-op that identifies a certain property or field.
            </summary>
            <typeparam name="T">The type of specimen.</typeparam>
            <typeparam name="TProperty">The type of property or field.</typeparam>
            <remarks>
            <para>
            This class can be used to reserve an identified property or field without doing anything
            with it.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.SpecifiedNullCommand`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Initializes a new instance of the
            <see cref="T:Ploeh.AutoFixture.Kernel.SpecifiedNullCommand`2"/> class with the supplied
            property picker expression.
            </summary>
            <param name="propertyPicker">An expression that identifies a property or field.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.SpecifiedNullCommand`2.Execute(`0,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Does nothing.
            </summary>
            <param name="specimen">A specimen.</param>
            <param name="context">An <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenContext"/>.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.SpecifiedNullCommand`2.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates whether a request matches the property or field reserved by this command.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is is a <see cref="T:System.Reflection.PropertyInfo"/>
            or <see cref="T:System.Reflection.FieldInfo"/> that identifies the property or field reserved by this
            <see cref="T:Ploeh.AutoFixture.Kernel.BindingCommand`2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.SpecifiedNullCommand`2.Member">
            <summary>
            Gets the member identified by the expression supplied through the constructor.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.OrRequestSpecification">
            <summary>
            A boolean 'Or' Composite <see cref="T:Ploeh.AutoFixture.Kernel.IRequestSpecification"/>.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.OrRequestSpecification.#ctor(Ploeh.AutoFixture.Kernel.IRequestSpecification[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.OrRequestSpecification"/> class with the
            supplied specifications.
            </summary>
            <param name="specifications">An array of <see cref="T:Ploeh.AutoFixture.Kernel.IRequestSpecification"/>.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.OrRequestSpecification.#ctor(System.Collections.Generic.IEnumerable{Ploeh.AutoFixture.Kernel.IRequestSpecification})">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.OrRequestSpecification"/> class with the
            supplied specifications.
            </summary>
            <param name="specifications">A sequence of <see cref="T:Ploeh.AutoFixture.Kernel.IRequestSpecification"/>.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.OrRequestSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is satisfied by any of the
            <see cref="P:Ploeh.AutoFixture.Kernel.OrRequestSpecification.Specifications"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.OrRequestSpecification.Specifications">
            <summary>
            Gets the decorated specifications.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.Postprocessor">
            <summary>
            Performs post-processing on a created specimen.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.Postprocessor`1">
            <summary>
            Performs post-processing on a created specimen.
            </summary>
            <typeparam name="T">The type of specimen.</typeparam>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.Postprocessor`1.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder,System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.Postprocessor`1"/> class with the
            supplied parameters.
            </summary>
            <param name="builder">The <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> to decorate.</param>
            <param name="action">The action to perform on the created specimen.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.Postprocessor`1.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder,System.Action{`0,Ploeh.AutoFixture.Kernel.ISpecimenContext})">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.Postprocessor`1"/> class with the
            supplied parameters.
            </summary>
            <param name="builder">The <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> to decorate.</param>
            <param name="action">The action to perform on the created specimen.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.Postprocessor`1.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder,System.Action{`0,Ploeh.AutoFixture.Kernel.ISpecimenContext},Ploeh.AutoFixture.Kernel.IRequestSpecification)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.Postprocessor`1"/> class with the
            supplied parameters.
            </summary>
            <param name="builder">The <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> to decorate.</param>
            <param name="action">The action to perform on the created specimen.</param>
            <param name="specification">
            A specification which is used to determine whether postprocessing should be performed
            for a request.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.Postprocessor`1.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request and performs an action on the created
            specimen.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The requested specimen if possible; otherwise a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
            <remarks>
            <para>
            The <paramref name="request"/> can be any object, but will often be a
            <see cref="T:System.Type"/> or other <see cref="T:System.Reflection.MemberInfo"/> instances.
            </para>
            </remarks>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.Postprocessor`1.Action">
            <summary>
            Gets the action to perform on created specimens.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.Postprocessor`1.Builder">
            <summary>
            Gets the decorated builder.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.Postprocessor`1.Specification">
            <summary>
            Gets the filter that determines whether <see cref="P:Ploeh.AutoFixture.Kernel.Postprocessor`1.Action"/> should be executed.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.Postprocessor.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder,System.Action{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.Postprocessor"/> class with the supplied
            parameters.
            </summary>
            <param name="builder">The <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> to decorate.</param>
            <param name="action">The action to perform on the created specimen.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.Postprocessor.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder,System.Action{System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext})">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.Postprocessor"/> class with the supplied
            parameters.
            </summary>
            <param name="builder">The <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> to decorate.</param>
            <param name="action">The action to perform on the created specimen.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.Postprocessor.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder,System.Action{System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext},Ploeh.AutoFixture.Kernel.IRequestSpecification)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.Postprocessor"/> class with the supplied
            parameters.
            </summary>
            <param name="builder">The <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> to decorate.</param>
            <param name="action">The action to perform on the created specimen.</param>
            <param name="specification">
            A specification which is used to determine whether postprocessing should be performed
            for a request.
            </param>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.BindingCommand`2">
            <summary>
            Encapsulates a command that binds a property or a field to a value.
            </summary>
            <typeparam name="T">
            The type of the specimn on which the property or value will be set.
            </typeparam>
            <typeparam name="TProperty">The type of property or field.</typeparam>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.BindingCommand`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.BindingCommand`2"/> class with
            the supplied property picker expression.
            </summary>
            <param name="propertyPicker">An expression that identifies a property or field.</param>
            <remarks>
            <para>
            This constructor implies that an anonymous value will be assigned to the property or
            field identified by <paramref name="propertyPicker"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.BindingCommand`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.BindingCommand`2"/> class with
            the supplied property picker expression and the value to be assigned to that property
            or field.
            </summary>
            <param name="propertyPicker">An expression that identifies a property or field.</param>
            <param name="propertyValue">
            The value to assign to the property or field identified by
            <paramref name="propertyPicker"/>.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.BindingCommand`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Func{Ploeh.AutoFixture.Kernel.ISpecimenContext,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.BindingCommand`2"/> class with
            the supplied property picker expression and a function that creates a value to be
            assigned to that property or field.
            </summary>
            <param name="propertyPicker">An expression that identifies a property or field.</param>
            <param name="valueCreator">
            A function that creates a value that will be assigned to the property or field
            identified by <paramref name="propertyPicker"/>.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.BindingCommand`2.Execute(`0,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Executes the command on the supplied specimen by assigning the property of field the
            correct value.
            </summary>
            <param name="specimen">
            A specimen that should have its property or field assigned.
            </param>
            <param name="context">
            An <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenContext"/> which can supply an anonymous value for the
            property or field.
            </param>
            <remarks>
            <para>
            This method assigns a value to the property or field identified by the expression
            supplied to the class' constructor. If no value (or creator) was supplied to the
            constructor, <paramref name="context"/> will be used to create the value.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.BindingCommand`2.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates whether a request matches the property or field affected by this command.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> is a <see cref="T:System.Reflection.PropertyInfo"/>
            or <see cref="T:System.Reflection.FieldInfo"/> that identifies the property or field affected by this
            <see cref="T:Ploeh.AutoFixture.Kernel.BindingCommand`2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.BindingCommand`2.Member">
            <summary>
            Gets the member identified by the expression supplied through the constructor.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.BindingCommand`2.ValueCreator">
            <summary>
            Gets the function that creates a value to be assigned to the property or field
            identified by <see cref="P:Ploeh.AutoFixture.Kernel.BindingCommand`2.Member"/>.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.PropertyRequestRelay">
            <summary>
            Relays a request for a property to a <see cref="T:Ploeh.AutoFixture.Kernel.SeededRequest"/> with a seed based
            on the property's name.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.PropertyRequestRelay.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a specimen based on a requested property.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            A specimen created from a <see cref="T:Ploeh.AutoFixture.Kernel.SeededRequest"/> encapsulating the property type
            and name of the requested property, if possible; otherwise, a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/>
            instance.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.SeededFactory`1">
            <summary>
            Creates a new specimen from a <see cref="T:Ploeh.AutoFixture.Kernel.SeededRequest"/> using a function.
            </summary>
            <typeparam name="T">The type of specimen to create.</typeparam>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.SeededFactory`1.#ctor(System.Func{`0,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.SeededFactory`1"/> class.
            </summary>
            <param name="factory">The function that will create the specimen from a seed.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.SeededFactory`1.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a seeded request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The result of the contained function if <paramref name="request"/> is a
            <see cref="T:Ploeh.AutoFixture.Kernel.SeededRequest"/> for the correct type and containing a seed of the same
            type; otherwise a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.SeededFactory`1.Factory">
            <summary>
            Gets the factory that is used to create specimens from a seed.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.SpecimenFactory`1">
            <summary>
            Creates a new specimen using a <see cref="T:System.Func`1"/>.
            </summary>
            <typeparam name="T">The type of specimen to create.</typeparam>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.SpecimenFactory`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.SpecimenFactory`1"/> class.
            </summary>
            <param name="factory">The func that will create specimens.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.SpecimenFactory`1.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The specimen created by the Func contained by this instance.
            </returns>
            <remarks>
            <para>
            <paramref name="request"/> is ignored. Instead, the Func contained by this instance is
            used to create a specimen.
            </para>
            </remarks>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.SpecimenFactory`1.Factory">
            <summary>
            Gets the factory that will create specimens.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.SpecimenFactory`2">
            <summary>
            Creates a new specimen using a <see cref="T:System.Func`2"/>.
            </summary>
            <typeparam name="TInput">The type of the parameter provided to the Func.</typeparam>
            <typeparam name="T">The type of specimen to create.</typeparam>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.SpecimenFactory`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.SpecimenFactory`2"/> class.
            </summary>
            <param name="factory">The func that will create specimens.</param>
            <remarks>
            <para>
            The input parameter to <paramref name="factory"/> will be supplied by the
            <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenContext"/> passed to the <see cref="M:Ploeh.AutoFixture.Kernel.SpecimenFactory`2.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.SpecimenFactory`2.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The specimen created by the Func contained by this instance.
            </returns>
            <remarks>
            <para>
            <paramref name="request"/> is ignored. Instead, the Func contained by this instance is
            used to create a specimen. The parameter for the Func is supplied by
            <paramref name="context"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.SpecimenFactory`2.Factory">
            <summary>
            Gets the factory that creates specimens.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.SpecimenFactory`3">
            <summary>
            Creates a new specimen using a <see cref="T:System.Func`3"/>.
            </summary>
            <typeparam name="TInput1">The type of the first parameter provided to the Func.</typeparam>
            <typeparam name="TInput2">The type of the second parameter provided to the Func.</typeparam>
            <typeparam name="T">The type of specimen to create.</typeparam>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.SpecimenFactory`3.#ctor(System.Func{`0,`1,`2})">
            <summary>
            Initializes a new instance of the
            <see cref="T:Ploeh.AutoFixture.Kernel.SpecimenFactory`3"/> class.
            </summary>
            <param name="factory">The func that will create specimens.</param>
            <remarks>
            <para>
            The input parameters to <paramref name="factory"/> will be supplied by the
            <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenContext"/> passed to the <see cref="M:Ploeh.AutoFixture.Kernel.SpecimenFactory`3.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.SpecimenFactory`3.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The specimen created by the Func contained by this instance.
            </returns>
            <remarks>
            <para>
            <paramref name="request"/> is ignored. Instead, the Func contained by this instance is
            used to create a specimen. The parameters for the Func is supplied by
            <paramref name="context"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.SpecimenFactory`3.Factory">
            <summary>
            Gets the factory that creates specimens.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.SpecimenFactory`4">
            <summary>
            Creates a new specimen using a <see cref="T:System.Func`4"/>.
            </summary>
            <typeparam name="TInput1">The type of the first parameter provided to the Func.</typeparam>
            <typeparam name="TInput2">The type of the second parameter provided to the Func.</typeparam>
            <typeparam name="TInput3">The type of the third parameter provided to the Func.</typeparam>
            <typeparam name="T">The type of specimen to create.</typeparam>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.SpecimenFactory`4.#ctor(System.Func{`0,`1,`2,`3})">
            <summary>
            Initializes a new instance of the
            <see cref="T:Ploeh.AutoFixture.Kernel.SpecimenFactory`4"/> class.
            </summary>
            <param name="factory">The func that will create specimens.</param>
            <remarks>
            <para>
            The input parameters to <paramref name="factory"/> will be supplied by the
            <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenContext"/> passed to the <see cref="M:Ploeh.AutoFixture.Kernel.SpecimenFactory`4.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.SpecimenFactory`4.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The specimen created by the Func contained by this instance.
            </returns>
            <remarks>
            <para>
            <paramref name="request"/> is ignored. Instead, the Func contained by this instance is
            used to create a specimen. The parameters for the Func is supplied by
            <paramref name="context"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.SpecimenFactory`4.Factory">
            <summary>
            Gets the factory that creates specimens.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.SpecimenFactory`5">
            <summary>
            Creates a new specimen using a <see cref="T:System.Func`5"/>.
            </summary>
            <typeparam name="TInput1">The type of the first parameter provided to the Func.</typeparam>
            <typeparam name="TInput2">The type of the second parameter provided to the Func.</typeparam>
            <typeparam name="TInput3">The type of the third parameter provided to the Func.</typeparam>
            <typeparam name="TInput4">The type of the fourth parameter provided to the Func.</typeparam>
            <typeparam name="T">The type of specimen to create.</typeparam>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.SpecimenFactory`5.#ctor(System.Func{`0,`1,`2,`3,`4})">
            <summary>
            Initializes a new instance of the
            <see cref="T:Ploeh.AutoFixture.Kernel.SpecimenFactory`5"/> class.
            </summary>
            <param name="factory">The func that will create specimens.</param>
            <remarks>
            <para>
            The input parameters to <paramref name="factory"/> will be supplied by the
            <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenContext"/> passed to the <see cref="M:Ploeh.AutoFixture.Kernel.SpecimenFactory`5.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.SpecimenFactory`5.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The specimen created by the Func contained by this instance.
            </returns>
            <remarks>
            <para>
            <paramref name="request"/> is ignored. Instead, the Func contained by this instance is
            used to create a specimen. The parameters for the Func is supplied by
            <paramref name="context"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.SpecimenFactory`5.Factory">
            <summary>
            Gets the factory that creates specimens.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.TerminatingSpecimenBuilder">
            <summary>
            Throws an <see cref="T:Ploeh.AutoFixture.ObjectCreationException"/>.
            </summary>
            <remarks>
            <para>
            This <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> can be used as the last item in a
            <see cref="T:Ploeh.AutoFixture.Kernel.CompositeSpecimenBuilder"/> to throw an exception instead of letting the
            containing builder return a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance when it can't satisfy a
            request.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.TerminatingSpecimenBuilder.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Throws an <see cref="T:Ploeh.AutoFixture.ObjectCreationException"/>.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">
            A context that can be used to create other specimens. Not used.
            </param>
            <returns>
            This method never returns. It always throws an <see cref="T:Ploeh.AutoFixture.ObjectCreationException"/>.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.StableFiniteSequenceCustomization">
            <summary>
            A customization that makes sequences (i.e. <see cref="T:System.Collections.Generic.IEnumerable`1"/> stable instead of
            dynamic.
            </summary>
            <remarks>
            <para>
            A sequence (i.e. an instance of <see cref="T:System.Collections.Generic.IEnumerable`1"/> is not guaranteed to be
            stable or finite; it might, in fact, represent a Generator that creates an Iterator that
            can go on for ever. Even if the sequence is finite, it may not be stable because it may
            yield new items every time it's iterated.
            </para>
            <para>
            The StableFiniteSequenceCustomization class encapsulates a change in behavior that
            guarantees that an <see cref="T:Ploeh.AutoFixture.IFixture"/> instance will resolve a request for a sequence
            into a stable sequence.
            </para>
            </remarks>
            <seealso cref="T:Ploeh.AutoFixture.Kernel.StableFiniteSequenceRelay"/>
        </member>
        <member name="M:Ploeh.AutoFixture.StableFiniteSequenceCustomization.Customize(Ploeh.AutoFixture.IFixture)">
            <summary>
            Adds a <see cref="T:Ploeh.AutoFixture.Kernel.StableFiniteSequenceRelay"/> to an <see cref="T:Ploeh.AutoFixture.IFixture"/>.
            </summary>
            <param name="fixture">The fixture to customize.</param>
            <seealso cref="T:Ploeh.AutoFixture.StableFiniteSequenceCustomization"/>
        </member>
        <member name="T:Ploeh.AutoFixture.NumericSequenceGenerator">
            <summary>
            Creates a sequence of consecutive numbers, starting at 1.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.NumericSequenceGenerator.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates an anonymous number.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            The next number in a consequtive sequence, if <paramref name="request"/> is a request
            for a numeric value; otherwise, a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.NumericSequencePerTypeCustomization">
            <summary>
            A customization that enables numeric specimens to be unique within a specifc numeric <see cref="T:System.Type"/>.
            </summary>
            <remarks>
            <para>
            When this customization is added to an <see cref="T:Ploeh.AutoFixture.IFixture"/> instance, requests for numeric specimens
            will be satisfied by returning numbers from a <see cref="T:System.Type"/> specific sequence.
            </para>
            <para>
            This customization reproduces the generation strategy for numeric specimens used in AutoFixture up to version 2.1.
            </para>
            <example>
            <code>
            var fixture = new Fixture();
            fixture.Customize(new NumericSequencePerTypeCustomization());
            
            Console.WriteLine("Byte specimen is {0}", fixture.CreateAnonymous&lt;byte&gt;());
            Console.WriteLine("Int32 specimen is {0}", fixture.CreateAnonymous&lt;int&gt;());
            Console.WriteLine("Single specimen is {0}", fixture.CreateAnonymous&lt;float&gt;());
             
            // The output of this program will be:
            // Byte specimen is 1
            // Int32 specimen is 1
            // Single specimen is 1
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.NumericSequencePerTypeCustomization.Customize(Ploeh.AutoFixture.IFixture)">
            <summary>
            Customizes the specified fixture by adding the <see cref="T:System.Type"/> specific numeric sequence generators.
            </summary>
            <param name="fixture">The fixture to customize.</param>
        </member>
        <member name="T:Ploeh.AutoFixture.ThrowingRecursionBehavior">
            <summary>
            Decorates a <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> with a <see cref="T:Ploeh.AutoFixture.Kernel.ThrowingRecursionGuard"/>.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.ThrowingRecursionBehavior.Transform(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Decorates the supplied <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> with a
            <see cref="T:Ploeh.AutoFixture.Kernel.ThrowingRecursionGuard"/>.
            </summary>
            <param name="builder">The builder to decorate.</param>
            <returns>
            <paramref name="builder"/> decorated with a <see cref="T:Ploeh.AutoFixture.Kernel.NullRecursionGuard"/>.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.TraceWriter">
            <summary>
            Trace writer that will write out a trace of object requests and created objects
            in the <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> pipeline.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.TraceWriter.#ctor(System.IO.TextWriter,Ploeh.AutoFixture.Kernel.TracingBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.TraceWriter"/> class.
            </summary>
            <param name="writer">The output stream for the trace.</param>
            <param name="tracer">The <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> to decorate.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.TraceWriter.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request by delegating to its decorated builder.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The requested specimen if possible; otherwise a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.TraceWriter.Tracer">
            <summary>
            Gets the <see cref="T:Ploeh.AutoFixture.Kernel.TracingBuilder"/> decorated by this instance.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.TraceWriter.TraceRequestFormatter">
            <summary>
            Gets or sets the formatter for tracing a request.
            </summary>
            <value>The request trace formatter.</value>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.TraceWriter.TraceSpecimenFormatter">
            <summary>
            Gets or sets the formatter for tracing a created specimen.
            </summary>
            <value>The created specimen trace formatter.</value>
        </member>
        <member name="T:Ploeh.AutoFixture.GuidGenerator">
            <summary>
            Creates new <see cref="T:System.Guid"/> instances.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.GuidGenerator.CreateAnonymous">
            <summary>
            Creates a new <see cref="T:System.Guid"/> instance.
            </summary>
            <returns>A new <see cref="T:System.Guid"/> instance.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.GuidGenerator.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new <see cref="T:System.Guid"/> instance.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            A new <see cref="T:System.Guid"/> instance, if <paramref name="request"/> is a request for a
            <see cref="T:System.Guid"/>; otherwise, a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.CompositeSpecimenBuilder">
            <summary>
            Creates specimens by returning the first specimen created by its children.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.CompositeSpecimenBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.CompositeSpecimenBuilder"/> class.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.CompositeSpecimenBuilder.#ctor(System.Collections.Generic.IEnumerable{Ploeh.AutoFixture.Kernel.ISpecimenBuilder})">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.CompositeSpecimenBuilder"/> class with the
            supplied builders.
            </summary>
            <param name="builders">The child builders.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.CompositeSpecimenBuilder.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.CompositeSpecimenBuilder"/> class with the
            supplied builders.
            </summary>
            <param name="builders">The child builders.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.CompositeSpecimenBuilder.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen by delegating to <see cref="P:Ploeh.AutoFixture.Kernel.CompositeSpecimenBuilder.Builders"/>.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A container that can be used to create other specimens.</param>
            <returns>The first result created by <see cref="P:Ploeh.AutoFixture.Kernel.CompositeSpecimenBuilder.Builders"/>.</returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.CompositeSpecimenBuilder.Builders">
            <summary>
            Gets the child builders.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.SpecimenContext">
            <summary>
            Default implementation of <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenContext"/>.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.ISpecimenContext">
            <summary>
            A context used to create anonymous variables (specimens).
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.ISpecimenContext.Resolve(System.Object)">
            <summary>
            Creates an anonymous variable (specimen) based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <returns>The requested specimen if possible.</returns>
            <remarks>
            <para>
            The <paramref name="request"/> can be any object, but will often be a
            <see cref="T:System.Type"/> or other <see cref="T:System.Reflection.MemberInfo"/> instances.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.SpecimenContext.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of <see cref="T:Ploeh.AutoFixture.Kernel.SpecimenContext"/> with the supplied
            <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/>.
            </summary>
            <param name="builder">The builder that will handle requests.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.SpecimenContext.Resolve(System.Object)">
            <summary>
            Creates an anonymous variable (specimen) based on a request by delegating the request
            to its contained <see cref="P:Ploeh.AutoFixture.Kernel.SpecimenContext.Builder"/>.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <returns>The result of a request to the contained <see cref="P:Ploeh.AutoFixture.Kernel.SpecimenContext.Builder"/>.</returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.SpecimenContext.Builder">
            <summary>
            Gets the <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> contained by the instance.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.ConstructorInvoker">
            <summary>
            Creates a new instance of the requested type by invoking the first constructor it can
            satisfy.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.ConstructorInvoker.#ctor(Ploeh.AutoFixture.Kernel.IConstructorQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.ConstructorInvoker"/> class with the
            supplied <see cref="T:Ploeh.AutoFixture.Kernel.IConstructorQuery"/>.
            </summary>
            <param name="query">
            The <see cref="T:Ploeh.AutoFixture.Kernel.IConstructorQuery"/> that defines which constructors are attempted.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.ConstructorInvoker.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a specimen of the requested type by invoking the first constructor it can
            satisfy.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            A specimen generated from a constructor of the requested type, if possible;
            otherwise, <see langword="null"/>.
            </returns>
            <remarks>
            <para>
            This method uses the first constructor returned by <see cref="P:Ploeh.AutoFixture.Kernel.ConstructorInvoker.Query"/> where
            <paramref name="context"/> can create values for all parameters.
            </para>
            </remarks>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.ConstructorInvoker.Query">
            <summary>
            Gets the <see cref="T:Ploeh.AutoFixture.Kernel.IConstructorQuery"/> that defines which constructors will be
            attempted.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.NoSpecimen">
            <summary>
            Signifies that it's not a specimen.
            </summary>
            <remarks>
            <para>
            <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> implementations are expected to return
            <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instances if they can't handle the request. This ensures that
            <see langword="null"/> can be used as a proper return value.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.NoSpecimen.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> class with a null request.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.NoSpecimen.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> class with the supplied
            request.
            </summary>
            <param name="request">
            The original request that prompts the creation of this instance.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.NoSpecimen.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current
            <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare to the current instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current
            instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.NoSpecimen.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> class.
            </summary>
            <returns>A hash code for the current <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.NoSpecimen.Equals(Ploeh.AutoFixture.Kernel.NoSpecimen)">
            <summary>
            Indicates whether the current instance is equal to another <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/>
            instance.
            </summary>
            <param name="other">
            A <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance to compare with this instance.
            </param>
            <returns>
            <see langword="true"/> if the current instanec is equal to the <paramref name="other"/>
            parameter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.NoSpecimen.Request">
            <summary>
            Gets the original request that prompted the creation of the current instance.
            </summary>
            <remarks>
            <para>
            This property value may be <see langword="null"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.ParameterRequestRelay">
            <summary>
            Relays a request for a parameter to a <see cref="T:Ploeh.AutoFixture.Kernel.SeededRequest"/> with a seed based
            on the parameter's name.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.ParameterRequestRelay.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a specimen based on a requested parameter.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            A specimen created from a <see cref="T:Ploeh.AutoFixture.Kernel.SeededRequest"/> encapsulating the parameter type
            and name of the requested parameter, if possible; otherwise, a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/>
            instance.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.TracingBuilder">
            <summary>
            Tracks any request and passes it on to the container.
            Tracks any returned object from the container and passes it on.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.TracingBuilder.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.TracingBuilder"/> class with a decorated
            <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> to decorate.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.TracingBuilder.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request and raises events tracing the progress.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The requested specimen if possible; otherwise a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
            <remarks>
            <para>
            The <paramref name="request"/> can be any object, but will often be a
            <see cref="T:System.Type"/> or other <see cref="T:System.Reflection.MemberInfo"/> instances.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.TracingBuilder.OnSpecimenCreated(Ploeh.AutoFixture.Kernel.SpecimenCreatedEventArgs)">
            <summary>
            Raises the <see cref="E:Ploeh.AutoFixture.Kernel.TracingBuilder.SpecimenCreated"/> event.
            </summary>
            <param name="e">The event arguments for the event.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.TracingBuilder.OnSpecimenRequested(Ploeh.AutoFixture.Kernel.RequestTraceEventArgs)">
            <summary>
            Raises the <see cref="E:Ploeh.AutoFixture.Kernel.TracingBuilder.SpecimenRequested"/> event.
            </summary>
            <param name="e">The event arguments for the event.</param>
        </member>
        <member name="E:Ploeh.AutoFixture.Kernel.TracingBuilder.SpecimenRequested">
            <summary>
            Raised when a specimen is requested.
            </summary>
        </member>
        <member name="E:Ploeh.AutoFixture.Kernel.TracingBuilder.SpecimenCreated">
            <summary>
            Raised when a specimen was created.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.TracingBuilder.Builder">
            <summary>
            Gets the builder decorated by this instance.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.TracingBuilder.Filter">
            <summary>
            Gets or sets a filter for tracking
            </summary>
            <remarks>
            <para>
            By default, <see cref="P:Ploeh.AutoFixture.Kernel.TracingBuilder.Filter"/> tracks all requests and created Specimens, but you can
            provide a custom filter to only allow certain requests to be traced.
            </para>
            <para>
            As this is a variation of the Specification pattern, the filter must return
            <see langword="true"/> to allow the request to be tracked.
            </para>
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.SpecimenCreatedEventArgs">
            <summary>
            Event arguments about a created specimen.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.RequestTraceEventArgs">
            <summary>
            Event args about a request for a specimen
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.RequestTraceEventArgs.#ctor(System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.RequestTraceEventArgs"/> class with the
            supplied values.
            </summary>
            <param name="request">A request for a specimen</param>
            <param name="depth">
            The recursion depth at which <paramref name="request"/> occurred.
            </param>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.RequestTraceEventArgs.Depth">
            <summary>
            Gets the recursion depth at which <see cref="P:Ploeh.AutoFixture.Kernel.RequestTraceEventArgs.Request"/> occurred.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.RequestTraceEventArgs.Request">
            <summary>
            Gets the original request for a speciman
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.SpecimenCreatedEventArgs.#ctor(System.Object,System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.SpecimenCreatedEventArgs"/> class with the
            supplied values.
            </summary>
            <param name="request">A request for a specimen</param>
            <param name="specimen">
            The specimen that was created base on <paramref name="request"/>.
            </param>
            <param name="depth">
            The recursion depth at which <paramref name="request"/> occurred.
            </param>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.SpecimenCreatedEventArgs.Specimen">
            <summary>
            Gets the specimen that was created from <see cref="P:Ploeh.AutoFixture.Kernel.RequestTraceEventArgs.Request"/>.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.StringSeedRelay">
            <summary>
            Unwraps a request for a string <see cref="T:Ploeh.AutoFixture.Kernel.SeededRequest"/> to a request for a string and
            prefixes the seed to the result.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.StringSeedRelay.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates an anonymous string based on a seed.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            A string with the seed prefixed to a string created by <paramref name="context"/> if
            possible; otherwise, <see langword="null"/>.
            </returns>
            <remarks>
            <para>
            This method only returns an instance if a number of conditions are satisfied.
            <paramref name="request"/> must represent a request for a seed string, and
            <paramref name="context"/> must be able to create a string.
            </para>
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.TrueRequestSpecification">
            <summary>
            A <see cref="T:Ploeh.AutoFixture.Kernel.IRequestSpecification"/> that is always <see langword="true"/>.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.TrueRequestSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/>.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.ExactTypeSpecification">
            <summary>
            A specification that evaluates requests for types against a target type.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.ExactTypeSpecification.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.ExactTypeSpecification"/> class.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.ExactTypeSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="true"/> if <paramref name="request"/> matches the target type;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.ExactTypeSpecification.TargetType">
            <summary>
            Gets the type targeted by this <see cref="T:Ploeh.AutoFixture.Kernel.IRequestSpecification"/>.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.UnspecifiedSpecimenCommand`1">
            <summary>
            Encapsulates an operation without identifying any property or field.
            </summary>
            <typeparam name="T">The type of specimen.</typeparam>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.UnspecifiedSpecimenCommand`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.UnspecifiedSpecimenCommand`1"/>
            class.
            </summary>
            <param name="action">The action to perform on a specimen.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.UnspecifiedSpecimenCommand`1.Execute(`0,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Executes <see cref="P:Ploeh.AutoFixture.Kernel.UnspecifiedSpecimenCommand`1.Action"/> on the supplied specimen.
            </summary>
            <param name="specimen">The specimen on which the command is executed.</param>
            <param name="context">
            An <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenContext"/> that can be used to resolve other requests. Not
            used.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.UnspecifiedSpecimenCommand`1.IsSatisfiedBy(System.Object)">
            <summary>
            Evaluates a request for a specimen.
            </summary>
            <param name="request">The specimen request.</param>
            <returns>
            <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.UnspecifiedSpecimenCommand`1.Action">
            <summary>
            Gets the action that can be performed on a specimen.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.SeedIgnoringRelay">
            <summary>
            Unwraps a request for a <see cref="T:Ploeh.AutoFixture.Kernel.SeededRequest"/> to a request for its
            <see cref="P:Ploeh.AutoFixture.Kernel.SeededRequest.Request"/> while ignoring the <see cref="P:Ploeh.AutoFixture.Kernel.SeededRequest.Seed"/>.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.SeedIgnoringRelay.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates an anonymous value by unwrapping a seeded request and ignoring the seed.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            A specimen based on <paramref name="request"/> if possible; otherwise,
            <see langword="null"/>.
            </returns>
            <remarks>
            <para>
            If <paramref name="request"/> is a seeded request, the Create method unwraps the inner
            request and forwards it to <paramref name="context"/>. The seed value is ignored.
            </para>
            <para>
            The purpose of this class is to provide a fallback to handle seeded requests that no
            other <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> instances have been able to handle. By ignoring
            the seed value, it handles those scenarios where the seed value and the inner request
            don't match and can't be combined, ensuring that at least some value is returned.
            </para>
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.BooleanSwitch">
            <summary>
            Creates an alternating sequence of <see langword="true"/> and <see langword="false"/>,
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.BooleanSwitch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.BooleanSwitch"/> class.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.BooleanSwitch.CreateAnonymous">
            <summary>
            Returns an alternating sequence of <see langword="true"/> and <see langword="false"/>
            every other time it is invoked.
            </summary>
            <returns>
            <see langword="true"/>, followed by <see langword="false"/> at the next invocation, and
            so on.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.BooleanSwitch.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Returns an alternating sequence of <see langword="true"/> and <see langword="false"/>
            every other time it is invoked.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            <see langword="true"/>, followed by <see langword="false"/> at the next invocation, and
            so on, if <paramref name="request"/> is a request for a boolean; otherwise, a
            <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.ByteSequenceGenerator">
            <summary>
            Creates a sequence of consecutive numbers, starting at 1.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.ByteSequenceGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.ByteSequenceGenerator"/> class.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.ByteSequenceGenerator.CreateAnonymous">
            <summary>
            Creates an anonymous number.
            </summary>
            <returns>The next number in a consequtive sequence.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.ByteSequenceGenerator.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates an anonymous byte.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            The next byte in a consequtive sequence, if <paramref name="request"/> is a request
            for a byte; otherwise, a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.DecimalSequenceGenerator">
            <summary>
            Creates a sequence of consecutive numbers, starting at 1.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DecimalSequenceGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Int64SequenceGenerator"/> class.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DecimalSequenceGenerator.CreateAnonymous">
            <summary>
            Creates an anonymous number.
            </summary>
            <returns>The next number in a consequtive sequence.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DecimalSequenceGenerator.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates an anonymous number.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            The next number in a consequtive sequence, if <paramref name="request"/> is a request
            for a decimal number; otherwise, a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.DoubleSequenceGenerator">
            <summary>
            Creates a sequence of consecutive numbers, starting at 1.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DoubleSequenceGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.DoubleSequenceGenerator"/> class.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.DoubleSequenceGenerator.CreateAnonymous">
            <summary>
            Creates an anonymous number.
            </summary>
            <returns>The next number in a consequtive sequence.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.DoubleSequenceGenerator.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates an anonymous number.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            The next number in a consequtive sequence, if <paramref name="request"/> is a request
            for a <see cref="T:System.Double"/>; otherwise, a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.Fixture">
            <summary>
            Provides anonymous object creation services.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Fixture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Fixture"/> class.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Fixture.#ctor(Ploeh.AutoFixture.DefaultRelays)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Fixture"/> class with the supplied engine
            parts.
            </summary>
            <param name="engineParts">The engine parts.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Fixture.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder,Ploeh.AutoFixture.Kernel.IMultiple)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Fixture"/> class with the supplied engine
            and a definition of what 'many' means.
            </summary>
            <param name="engine">The engine.</param>
            <param name="multiple">The definition and implementation of 'many'.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Fixture.Build``1">
            <summary>
            Customizes the creation algorithm for a single object, effectively turning off all
            Customizations on the <see cref="T:Ploeh.AutoFixture.IFixture"/>.
            </summary>
            <typeparam name="T">
            The type of object for which the algorithm should be customized.
            </typeparam>
            <returns>
            A <see cref="T:Ploeh.AutoFixture.Dsl.ICustomizationComposer`1"/> that can be used to customize the creation
            algorithm before creating the object.
            </returns>
            <remarks>
            <para>
            The Build method kicks off a Fluent API which is usually completed by invoking
            <see cref="M:Ploeh.AutoFixture.SpecimenFactory.CreateAnonymous``1(Ploeh.AutoFixture.Dsl.IPostprocessComposer{``0})"/> on the method
            chain.
            </para>
            <para>
            Note that the Build method chain is best understood as a one-off Customization. It
            bypasses all Customizations on the <see cref="T:Ploeh.AutoFixture.Fixture"/> instance. Instead, it allows
            fine-grained control when building a specific specimen. However, in most cases, adding
            a convention-based <see cref="T:Ploeh.AutoFixture.ICustomization"/> is a better, more flexible option.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Fixture.Customize(Ploeh.AutoFixture.ICustomization)">
            <summary>
            Applies a customization.
            </summary>
            <param name="customization">The customization to apply.</param>
            <returns>
            The current instance.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Fixture.Customize``1(System.Func{Ploeh.AutoFixture.Dsl.ICustomizationComposer{``0},Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer})">
            <summary>
            Customizes the creation algorithm for all objects of a given type.
            </summary>
            <typeparam name="T">The type of object to customize.</typeparam>
            <param name="composerTransformation">
            A function that customizes a given <see cref="T:Ploeh.AutoFixture.Dsl.ICustomizationComposer`1"/> and returns
            the modified composer.
            </param>
            <remarks>
            <para>
            The resulting <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> is added to <see cref="P:Ploeh.AutoFixture.Fixture.Customizations"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Fixture.Repeat``1(System.Func{``0})">
            <summary>
            Repeats a function many times.
            </summary>
            <typeparam name="T">
            The type of object that <paramref name="function"/> creates.
            </typeparam>
            <param name="function">
            A function that creates an instance of <typeparamref name="T"/>.
            </param>
            <returns>A sequence of objects created by <paramref name="function"/>.</returns>
            <remarks>
            <para>
            The number of times <paramref name="function"/> is invoked is determined by
            <see cref="P:Ploeh.AutoFixture.Fixture.RepeatCount"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.Fixture.Compose">
            <summary>
            Composes a new <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> instance that contains all the relevant
            strategies defined for this instance.
            </summary>
            <returns>
            A new <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> instance that contains all the relevant strategies
            for the this <see cref="T:Ploeh.AutoFixture.Fixture"/> instance, including <see cref="P:Ploeh.AutoFixture.Fixture.Customizations"/>,
            <see cref="P:Ploeh.AutoFixture.Fixture.Engine"/> and <see cref="P:Ploeh.AutoFixture.Fixture.ResidueCollectors"/>.
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Fixture.Behaviors">
            <summary>
            Gets the behaviors that are applied when <see cref="M:Ploeh.AutoFixture.Fixture.Compose"/> is invoked.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Fixture.Customizations">
            <summary>
            Gets the customizations that intercept the <see cref="P:Ploeh.AutoFixture.Fixture.Engine"/>.
            </summary>
            <remarks>
            <para>
            Any <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> in this list are invoked before
            <see cref="P:Ploeh.AutoFixture.Fixture.Engine"/>, giving them a chance to intercept a request and resolve it before
            the Engine.
            </para>
            <para>
            <see cref="M:Ploeh.AutoFixture.Fixture.Customize``1(System.Func{Ploeh.AutoFixture.Dsl.ICustomizationComposer{``0},Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer})"/> places resulting customizations in this list.
            </para>
            </remarks>
            <seealso cref="P:Ploeh.AutoFixture.Fixture.Engine"/>
            <seealso cref="P:Ploeh.AutoFixture.Fixture.ResidueCollectors"/>
        </member>
        <member name="P:Ploeh.AutoFixture.Fixture.Engine">
            <summary>
            Gets the core engine of the <see cref="T:Ploeh.AutoFixture.Fixture"/> instance.
            </summary>
            <remarks>
            <para>
            This is the core engine that drives a <see cref="T:Ploeh.AutoFixture.Fixture"/> instance. Even with no
            <see cref="P:Ploeh.AutoFixture.Fixture.Customizations"/> or <see cref="P:Ploeh.AutoFixture.Fixture.ResidueCollectors"/>, the
            <see cref="P:Ploeh.AutoFixture.Fixture.Engine"/> should be capably of resolving a wide range of different requests,
            based on conventions.
            </para>
            </remarks>
            <see cref="P:Ploeh.AutoFixture.Fixture.Customizations"/>
            <see cref="P:Ploeh.AutoFixture.Fixture.ResidueCollectors"/>
        </member>
        <member name="P:Ploeh.AutoFixture.Fixture.OmitAutoProperties">
            <summary>
            Gets or sets if writable properties should generally be assigned a value when 
            generating an anonymous object.
            </summary>
            <remarks>
            <para>
            The default value is false.
            </para>
            </remarks>
        </member>
        <member name="P:Ploeh.AutoFixture.Fixture.RepeatCount">
            <summary>
            Gets or sets a number that controls how many objects are created when a
            <see cref="T:Ploeh.AutoFixture.Fixture"/> creates more than one anonymous objects.
            </summary>
            <remarks>
            <para>
            The default value is 3.
            </para>
            </remarks>
            <seealso cref="M:Ploeh.AutoFixture.CollectionFiller.AddManyTo``1(Ploeh.AutoFixture.IFixture,System.Collections.Generic.ICollection{``0})"/>
            <seealso cref="M:Ploeh.AutoFixture.CollectionFiller.AddManyTo``1(Ploeh.AutoFixture.IFixture,System.Collections.Generic.ICollection{``0},System.Func{``0})"/>
            <seealso cref="M:Ploeh.AutoFixture.SpecimenFactory.CreateMany``1(Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer)"/>
            <seealso cref="M:Ploeh.AutoFixture.SpecimenFactory.CreateMany``1(Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer,System.Int32)"/>
            <seealso cref="M:Ploeh.AutoFixture.Fixture.Repeat``1(System.Func{``0})"/>
        </member>
        <member name="P:Ploeh.AutoFixture.Fixture.ResidueCollectors">
            <summary>
            Gets the residue collectors that can be used to handle requests that neither the
            <see cref="P:Ploeh.AutoFixture.Fixture.Customizations"/> nor <see cref="P:Ploeh.AutoFixture.Fixture.Engine"/> could handle.
            </summary>
            <remarks>
            <para>
            These <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> instances will be invoked if no previous builder
            could resolve a request. This gives you the opportunity to define fallback strategies
            to deal with unresolved requests.
            </para>
            </remarks>
        </member>
        <member name="T:Ploeh.AutoFixture.Int16SequenceGenerator">
            <summary>
            Creates a sequence of consecutive numbers, starting at 1.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Int16SequenceGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Int16SequenceGenerator"/> class.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Int16SequenceGenerator.CreateAnonymous">
            <summary>
            Creates an anonymous number.
            </summary>
            <returns>The next number in a consequtive sequence.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Int16SequenceGenerator.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates an anonymous number.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            The next number in a consequtive sequence, if <paramref name="request"/> is a request
            for a 16-bit integer; otherwise, a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.Int32SequenceGenerator">
            <summary>
            Creates a sequence of consecutive numbers, starting at 1.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Int32SequenceGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Int32SequenceGenerator"/> class.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Int32SequenceGenerator.CreateAnonymous">
            <summary>
            Creates an anonymous number.
            </summary>
            <returns>The next number in a consequtive sequence.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Int32SequenceGenerator.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates an anonymous number.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            The next number in a consequtive sequence, if <paramref name="request"/> is a request
            for an integer; otherwise, a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.Int64SequenceGenerator">
            <summary>
            Creates a sequence of consecutive numbers, starting at 1.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Int64SequenceGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Int64SequenceGenerator"/> class.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Int64SequenceGenerator.CreateAnonymous">
            <summary>
            Creates an anonymous number.
            </summary>
            <returns>The next number in a consequtive sequence.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Int64SequenceGenerator.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates an anonymous number.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            The next number in a consequtive sequence, if <paramref name="request"/> is a request
            for an 64-bit integer; otherwise, a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.NullRecursionGuard">
            <summary>
            Recursion handler that returns null at recursion points.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.RecursionGuard">
            <summary>
            Base class for recursion handling. Tracks requests and reacts when a recursion point in the
            specimen creation process is detected.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.RecursionGuard.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.RecursionGuard"/> class.
            </summary>
            <param name="builder">The intercepting builder to decorate.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.RecursionGuard.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder,System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.RecursionGuard"/> class.
            </summary>
            <param name="builder">The intercepting builder to decorate.</param>
            <param name="comparer">
            An IEqualitycomparer implementation to use when comparing requests to determine recursion.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.RecursionGuard.HandleRecursiveRequest(System.Object)">
            <summary>
            Handles a request that would cause recursion.
            </summary>
            <param name="request">The recursion causing request.</param>
            <returns>The specimen to return.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.RecursionGuard.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A container that can be used to create other specimens.</param>
            <returns>
            The requested specimen if possible; otherwise a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
            <remarks>
            	<para>
            The <paramref name="request"/> can be any object, but will often be a
            <see cref="T:System.Type"/> or other <see cref="T:System.Reflection.MemberInfo"/> instances.
            </para>
            </remarks>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.RecursionGuard.Builder">
            <summary>
            Gets the decorated builder supplied via the constructor.
            </summary>
            <seealso cref="M:Ploeh.AutoFixture.Kernel.RecursionGuard.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)"/>
            <seealso cref="M:Ploeh.AutoFixture.Kernel.RecursionGuard.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder,System.Collections.IEqualityComparer)"/>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.RecursionGuard.RecordedRequests">
            <summary>
            Gets the recorded requests so far.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.NullRecursionGuard.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.NullRecursionGuard"/> class.
            </summary>
            <param name="builder">The builder to decorate.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.NullRecursionGuard.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder,System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.NullRecursionGuard"/> class.
            </summary>
            <param name="builder">The intercepting builder to decorate.</param>
            <param name="comparer">An IEqualitycomparer implementation to use when comparing requests to determine recursion.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.NullRecursionGuard.HandleRecursiveRequest(System.Object)">
            <summary>
            Handles a request that would cause recursion by returning null.
            </summary>
            <param name="request">The recursion causing request.</param>
            <returns>Always null.</returns>
        </member>
        <member name="T:Ploeh.AutoFixture.ObjectCreationException">
            <summary>
            The exception that is thrown when AutoFixture is unable to create an object.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.ObjectCreationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.ObjectCreationException"/> class with a
            default <see cref="P:System.Exception.Message"/>.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.ObjectCreationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.ObjectCreationException"/> class with a
            custom <see cref="P:System.Exception.Message"/>.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.ObjectCreationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.ObjectCreationException"/> class with a
            custom <see cref="P:System.Exception.Message"/> and <see cref="P:System.Exception.InnerException"/>.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.ObjectCreationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Ininitalizes a new instance of the <see cref="T:Ploeh.AutoFixture.ObjectCreationException"/> class with
            serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">
            The contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Ploeh.AutoFixture.SByteSequenceGenerator">
            <summary>
            Creates a sequence of consecutive numbers, starting at 1.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.SByteSequenceGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.SByteSequenceGenerator"/> class.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.SByteSequenceGenerator.CreateAnonymous">
            <summary>
            Creates an anonymous number.
            </summary>
            <returns>The next number in a consequtive sequence.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.SByteSequenceGenerator.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates an anonymous <see cref="T:System.SByte"/>.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            The next <see cref="T:System.SByte"/> in a consequtive sequence, if <paramref name="request"/>
            is a request for an SByte; otherwise, a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.SeededRequest">
            <summary>
            Encapsulates a seed for a given type.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.SeededRequest.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="P:Ploeh.AutoFixture.Kernel.SeededRequest.Seed"/> class.
            </summary>
            <param name="request">The request for which the seed applies.</param>
            <param name="seed">The seed.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.SeededRequest.Equals(System.Object)">
            <summary>
            Determines whether this instance equals another instance.
            </summary>
            <param name="obj">The other instance.</param>
            <returns>
            <see langword="true"/> if this instance equals <paramref name="obj"/>; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.SeededRequest.GetHashCode">
            <summary>
            Returns the hash code for the instance.
            </summary>
            <returns>The hash code for the instance.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.SeededRequest.Equals(Ploeh.AutoFixture.Kernel.SeededRequest)">
            <summary>
            Determines whether this instance equals another instance.
            </summary>
            <param name="other">The other instance.</param>
            <returns>
            <see langword="true"/> if this instance equals <paramref name="other"/>; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.SeededRequest.Seed">
            <summary>
            Gets the seed value.
            </summary>
        </member>
        <member name="P:Ploeh.AutoFixture.Kernel.SeededRequest.Request">
            <summary>
            Gets the inner request for which the seed applies.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.SingleSequenceGenerator">
            <summary>
            Creates a sequence of consecutive numbers, starting at 1.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.SingleSequenceGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.SingleSequenceGenerator"/> class.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.SingleSequenceGenerator.CreateAnonymous">
            <summary>
            Creates an anonymous number.
            </summary>
            <returns>The next number in a consequtive sequence.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.SingleSequenceGenerator.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates an anonymous number.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            The next number in a consequtive sequence, if <paramref name="request"/> is a request
            for a <see cref="T:System.Single"/>; otherwise, a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.SpecimenBuilderComposer">
            <summary>
            Provides an API to customize the creational strategy for a specific type.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.SpecimenBuilderComposer.Do``1(Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer,System.Action{``0})">
            <summary>
            Invokes the supplied action with an anonymous parameter value.
            </summary>
            <typeparam name="T">The type of the anonymous parameter.</typeparam>
            <param name="composer">The composer.</param>
            <param name="action">The action to invoke.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.SpecimenBuilderComposer.Do``2(Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer,System.Action{``0,``1})">
            <summary>
            Invokes the supplied action with anonymous parameter values.
            </summary>
            <typeparam name="T1">The type of the first anonymous parameter.</typeparam>
            <typeparam name="T2">The type of the second anonymous parameter.</typeparam>
            <param name="composer">The composer.</param>
            <param name="action">The action to invoke.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.SpecimenBuilderComposer.Do``3(Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer,System.Action{``0,``1,``2})">
            <summary>
            Invokes the supplied action with anonymous parameter values.
            </summary>
            <typeparam name="T1">The type of the first anonymous parameter.</typeparam>
            <typeparam name="T2">The type of the second anonymous parameter.</typeparam>
            <typeparam name="T3">The type of the third anonymous parameter.</typeparam>
            <param name="composer">The composer.</param>
            <param name="action">The action to invoke.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.SpecimenBuilderComposer.Do``4(Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer,System.Action{``0,``1,``2,``3})">
            <summary>
            Invokes the supplied action with anonymous parameter values.
            </summary>
            <typeparam name="T1">The type of the first anonymous parameter.</typeparam>
            <typeparam name="T2">The type of the second anonymous parameter.</typeparam>
            <typeparam name="T3">The type of the third anonymous parameter.</typeparam>
            <typeparam name="T4">The type of the fourth anonymous parameter.</typeparam>
            <param name="composer">The composer.</param>
            <param name="action">The action to invoke.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.SpecimenBuilderComposer.Get``2(Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer,System.Func{``0,``1})">
            <summary>
            Invokes the supplied function with an anonymous parameter value and returns the result.
            </summary>
            <typeparam name="T">The type of the anonymous parameter.</typeparam>
            <typeparam name="TResult">The return type.</typeparam>
            <param name="composer">The composer.</param>
            <param name="function">The function to invoke.</param>
            <returns>The return value of <paramref name="function"/>.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.SpecimenBuilderComposer.Get``3(Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer,System.Func{``0,``1,``2})">
            <summary>
            Invokes the supplied function with anonymous parameter values and returns the result.
            </summary>
            <typeparam name="T1">The type of the first anonymous parameter.</typeparam>
            <typeparam name="T2">The type of the second anonymous parameter.</typeparam>
            <typeparam name="TResult">The return type.</typeparam>
            <param name="composer">The composer.</param>
            <param name="function">The function to invoke.</param>
            <returns>The return value of <paramref name="function"/>.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.SpecimenBuilderComposer.Get``4(Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer,System.Func{``0,``1,``2,``3})">
            <summary>
            Invokes the supplied function with anonymous parameter values and returns the result.
            </summary>
            <typeparam name="T1">The type of the first anonymous parameter.</typeparam>
            <typeparam name="T2">The type of the second anonymous parameter.</typeparam>
            <typeparam name="T3">The type of the third anonymous parameter.</typeparam>
            <typeparam name="TResult">The return type.</typeparam>
            <param name="composer">The composer.</param>
            <param name="function">The function to invoke.</param>
            <returns>The return value of <paramref name="function"/>.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.SpecimenBuilderComposer.Get``5(Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer,System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Invokes the supplied function with anonymous parameter values and returns the result.
            </summary>
            <typeparam name="T1">The type of the first anonymous parameter.</typeparam>
            <typeparam name="T2">The type of the second anonymous parameter.</typeparam>
            <typeparam name="T3">The type of the third anonymous parameter.</typeparam>
            <typeparam name="T4">The type of the fourth anonymous parameter.</typeparam>
            <typeparam name="TResult">The return type.</typeparam>
            <param name="composer">The composer.</param>
            <param name="function">The function to invoke.</param>
            <returns>The return value of <paramref name="function"/>.</returns>
        </member>
        <member name="T:Ploeh.AutoFixture.SpecimenFactory">
            <summary>
            Creates anonymous variables from <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenContext"/> or
            <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer"/> instances.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.SpecimenFactory.CreateAnonymous``1(Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates an anonymous variable of the requested type.
            </summary>
            <typeparam name="T">The type of object to create.</typeparam>
            <param name="context">The context used to resolve the type request.</param>
            <returns>An anonymous object of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.SpecimenFactory.CreateAnonymous``1(Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer)">
            <summary>
            Creates an anonymous variable of the requested type.
            </summary>
            <typeparam name="T">The type of object to create.</typeparam>
            <param name="composer">The composer used to resolve the type request.</param>
            <returns>An anonymous object of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.SpecimenFactory.CreateAnonymous``1(Ploeh.AutoFixture.Dsl.IPostprocessComposer{``0})">
            <summary>
            Creates an anonymous variable of the requested type.
            </summary>
            <typeparam name="T">The type of object to create.</typeparam>
            <param name="composer">The composer used to resolve the type request.</param>
            <returns>An anonymous object of type <typeparamref name="T"/>.</returns>
            <remarks>
            <para>
            The only purpose of this explicit overload is to support type inferencing.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.SpecimenFactory.CreateAnonymous``1(Ploeh.AutoFixture.Kernel.ISpecimenContext,``0)">
            <summary>
            Creates an anonymous object, potentially using the supplied seed as additional
            information when creating the object.
            </summary>
            <typeparam name="T">The type of object to create.</typeparam>
            <param name="seed">
            Any data that adds additional information when creating the anonymous object.
            </param>
            <param name="context">The context used to resolve the type request.</param>
            <returns>An anonymous object.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.SpecimenFactory.CreateAnonymous``1(Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer,``0)">
            <summary>
            Creates an anonymous object, potentially using the supplied seed as additional
            information when creating the object.
            </summary>
            <typeparam name="T">The type of object to create.</typeparam>
            <param name="seed">
            Any data that adds additional information when creating the anonymous object.
            </param>
            <param name="composer">The composer used to resolve the type request.</param>
            <returns>An anonymous object.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.SpecimenFactory.CreateMany``1(Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates many anonymous objects.
            </summary>
            <typeparam name="T">The type of objects to create.</typeparam>
            <param name="context">The context used to resolve the type request.</param>
            <returns>A sequence of anonymous object of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.SpecimenFactory.CreateMany``1(Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer)">
            <summary>
            Creates many anonymous objects.
            </summary>
            <typeparam name="T">The type of objects to create.</typeparam>
            <param name="composer">The composer used to resolve the type request.</param>
            <returns>A sequence of anonymous object of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.SpecimenFactory.CreateMany``1(Ploeh.AutoFixture.Dsl.IPostprocessComposer{``0})">
            <summary>
            Creates many anonymous objects.
            </summary>
            <typeparam name="T">The type of objects to create.</typeparam>
            <param name="composer">The composer used to resolve the type request.</param>
            <returns>A sequence of anonymous object of type <typeparamref name="T"/>.</returns>
            <remarks>
            <para>
            The only purpose of this explicit overload is to support type inferencing.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.SpecimenFactory.CreateMany``1(Ploeh.AutoFixture.Kernel.ISpecimenContext,``0)">
            <summary>
            Creates many anonymous objects.
            </summary>
            <typeparam name="T">The type of objects to create.</typeparam>
            <param name="context">The context used to resolve the type request.</param>
            <param name="seed">
            An initial value that may or may not be used as input for the algorithm creating the
            return value.
            </param>
            <returns>A sequence of anonymous object of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.SpecimenFactory.CreateMany``1(Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer,``0)">
            <summary>
            Creates many anonymous objects.
            </summary>
            <typeparam name="T">The type of objects to create.</typeparam>
            <param name="composer">The composer used to resolve the type request.</param>
            <param name="seed">
            An initial value that may or may not be used as input for the algorithm creating the
            return value.
            </param>
            <returns>A sequence of anonymous object of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.SpecimenFactory.CreateMany``1(Ploeh.AutoFixture.Kernel.ISpecimenContext,System.Int32)">
            <summary>
            Creates many anonymous objects.
            </summary>
            <typeparam name="T">The type of objects to create.</typeparam>
            <param name="context">The context used to resolve the type request.</param>
            <param name="count">The number of objects to create.</param>
            <returns>A sequence of anonymous objects of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.SpecimenFactory.CreateMany``1(Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer,System.Int32)">
            <summary>
            Creates many anonymous objects.
            </summary>
            <typeparam name="T">The type of objects to create.</typeparam>
            <param name="composer">The composer used to resolve the type request.</param>
            <param name="count">The number of objects to create.</param>
            <returns>A sequence of anonymous objects of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.SpecimenFactory.CreateMany``1(Ploeh.AutoFixture.Dsl.IPostprocessComposer{``0},System.Int32)">
            <summary>
            Creates many anonymous objects.
            </summary>
            <typeparam name="T">The type of objects to create.</typeparam>
            <param name="composer">The composer used to resolve the type request.</param>
            <param name="count">The number of objects to create.</param>
            <returns>A sequence of anonymous objects of type <typeparamref name="T"/>.</returns>
            <remarks>
            <para>
            The only purpose of this explicit overload is to support type inferencing.
            </para>
            </remarks>
        </member>
        <member name="M:Ploeh.AutoFixture.SpecimenFactory.CreateMany``1(Ploeh.AutoFixture.Kernel.ISpecimenContext,``0,System.Int32)">
            <summary>
            Creates many anonymous objects.
            </summary>
            <typeparam name="T">The type of objects to create.</typeparam>
            <param name="context">The context used to resolve the type request.</param>
            <param name="seed">
            An initial value that may or may not be used as input for the algorithm creating the
            return value.
            </param>
            <param name="count">The number of objects to create.</param>
            <returns>A sequence of anonymous objects of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.SpecimenFactory.CreateMany``1(Ploeh.AutoFixture.Kernel.ISpecimenBuilderComposer,``0,System.Int32)">
            <summary>
            Creates many anonymous objects.
            </summary>
            <typeparam name="T">The type of objects to create.</typeparam>
            <param name="composer">The composer used to resolve the type request.</param>
            <param name="seed">
            An initial value that may or may not be used as input for the algorithm creating the
            return value.
            </param>
            <param name="count">The number of objects to create.</param>
            <returns>A sequence of anonymous objects of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:Ploeh.AutoFixture.StringGenerator">
            <summary>
            Creates string values based on a supplied factory.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.StringGenerator.#ctor(System.Func{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.StringGenerator"/> class with the supplied
            specimen factory.
            </summary>
            <param name="specimenFactory">
            A factory that creates a anonymous variables (specimens). The
            <see cref="T:Ploeh.AutoFixture.StringGenerator"/> instance will call <see cref="M:System.Object.ToString"/> on the
            created specimen.
            </param>
        </member>
        <member name="M:Ploeh.AutoFixture.StringGenerator.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates string specimens by invoking the supplied specimen factory and calling
            <see cref="M:System.Object.ToString"/> on the result.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            The string representation of a specimen created by the contained specimen factory.
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.StringGenerator.Factory">
            <summary>
            Gets the factory used to specimens.
            </summary>
            <seealso cref="M:Ploeh.AutoFixture.StringGenerator.#ctor(System.Func{System.Object})"/>
        </member>
        <member name="T:Ploeh.AutoFixture.Kernel.ThrowingRecursionGuard">
            <summary>
            Handles recursion in the specimen creation process by throwing an exception at recursion point.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.ThrowingRecursionGuard.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder,System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.ThrowingRecursionGuard"/> class.
            </summary>
            <param name="builder">The intercepting builder to decorate.</param>
            <param name="comparer">An IEqualitycomparer implementation to use when comparing requests to determine recursion.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.ThrowingRecursionGuard.#ctor(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.Kernel.ThrowingRecursionGuard"/> class.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.Kernel.ThrowingRecursionGuard.HandleRecursiveRequest(System.Object)">
            <summary>
            Handles a request that would cause recursion by throwing an exception.
            </summary>
            <param name="request">The recursion causing request.</param>
            <returns>Nothing. Always throws.</returns>
        </member>
        <member name="T:Ploeh.AutoFixture.TracingBehavior">
            <summary>
            Decorates an <see cref="T:Ploeh.AutoFixture.Kernel.ISpecimenBuilder"/> with a <see cref="T:Ploeh.AutoFixture.Kernel.TraceWriter"/> to enable
            tracing for diagnosing how the decorated builder builds up specimens.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.TracingBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.TracingBehavior"/> class with the default
            <see cref="P:Ploeh.AutoFixture.TracingBehavior.Writer"/>, which is <see cref="P:System.Console.Out"/>.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.TracingBehavior.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.TracingBehavior"/> class with the supplied
            <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">The writer to which diagnostics is written.</param>
        </member>
        <member name="M:Ploeh.AutoFixture.TracingBehavior.Transform(Ploeh.AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Decorates the supplied builder with a <see cref="T:Ploeh.AutoFixture.Kernel.TraceWriter"/>.
            </summary>
            <param name="builder">The builder to transform.</param>
            <returns>
            A new <see cref="T:Ploeh.AutoFixture.Kernel.TraceWriter"/> that decorates <paramref name="builder"/> using
            <see cref="P:Ploeh.AutoFixture.TracingBehavior.Writer"/>.
            </returns>
        </member>
        <member name="P:Ploeh.AutoFixture.TracingBehavior.Writer">
            <summary>
            Gets the writer to which diagnostics information is written.
            </summary>
        </member>
        <member name="T:Ploeh.AutoFixture.TypeGenerator">
            <summary>
            Generates Type instances.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.TypeGenerator.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The <see cref="T:System.Object"/> <see cref="T:System.Type"/> if <paramref name="request"/> is a Type
            Type; otherwise a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.UInt16SequenceGenerator">
            <summary>
            Creates a sequence of consecutive numbers, starting at 1.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.UInt16SequenceGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.UInt16SequenceGenerator"/> class.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.UInt16SequenceGenerator.CreateAnonymous">
            <summary>
            Creates an anonymous number.
            </summary>
            <returns>The next number in a consequtive sequence.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.UInt16SequenceGenerator.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates an anonymous number.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            The next number in a consequtive sequence, if <paramref name="request"/> is a request
            for an unsigned 16-bit integer; otherwise, a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.UInt32SequenceGenerator">
            <summary>
            Creates a sequence of consecutive numbers, starting at 1.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.UInt32SequenceGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.UInt32SequenceGenerator"/> class.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.UInt32SequenceGenerator.CreateAnonymous">
            <summary>
            Creates an anonymous number.
            </summary>
            <returns>The next number in a consequtive sequence.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.UInt32SequenceGenerator.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates an anonymous number.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            The next number in a consequtive sequence, if <paramref name="request"/> is a request
            for an unsigned integer; otherwise, a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:Ploeh.AutoFixture.UInt64SequenceGenerator">
            <summary>
            Creates a sequence of consecutive numbers, starting at 1.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.UInt64SequenceGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ploeh.AutoFixture.UInt64SequenceGenerator"/> class.
            </summary>
        </member>
        <member name="M:Ploeh.AutoFixture.UInt64SequenceGenerator.CreateAnonymous">
            <summary>
            Creates an anonymous number.
            </summary>
            <returns>The next number in a consequtive sequence.</returns>
        </member>
        <member name="M:Ploeh.AutoFixture.UInt64SequenceGenerator.Create(System.Object,Ploeh.AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates an anonymous number.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">Not used.</param>
            <returns>
            The next number in a consequtive sequence, if <paramref name="request"/> is a request
            for an unsigned 64-bit integer; otherwise, a <see cref="T:Ploeh.AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
    </members>
</doc>
